--///////////////////////////////////////////////////////////////////////////
--// NetworkConfiguration.bed
--///////////////////////////////////////////////////////////////////////////
--// Copyright (c) 2005 Bugbear Entertainment ltd. 
--// All Rights Reserved.
--// 
--// Created on 7.1.2005 14:20:10
--// 
--// Authors: Fred Sundvik (fred.sundvik@bugbear.fi)
--///////////////////////////////////////////////////////////////////////////

dofile("data/menu/selection_balks.bed")

local State
local NumConfigurations
local CurrentTime
local MessageBoxActive

menu_checksavedevice_network = CreateMenuFromTemplate("template_basic")
menu_checksavedevice_network.options.title = L""
menu_checksavedevice_network.back = entermenu("menu_mainmenu")
menu_checksavedevice_network.forward = entermenu("menu_multiplayer_networkconfig")

function menu_checksavedevice_network.create(self)
	self.parent:create(self)
	self:loadResources()
	self.items = { }
end

function menu_checksavedevice_network.init(self)
	self.parent:init(self)

	GUI:SetBackgroundVideo("data/video/bg_main")

	GUI:SetHelpButtons()

	Save.CheckSaveDeviceNetwork()
	Save.UpdateSaveFlow()
end

function menu_checksavedevice_network.deinit(self)
	self.parent:deinit(self)
end

function menu_checksavedevice_network.update(self, time)
	self.parent:update(self, time)
	
	if Save.GetSaveFlowState() == Save.SAVEFLOW_NONE and Save.GetSaveFlowResult() == Save.SAVEFLOW_OK then
		menu_checksavedevice_network.forward()
	end
	if Save.GetSaveFlowState() == Save.SAVEFLOW_NONE and Save.GetSaveFlowResult() == Save.SAVEFLOW_USER_BACK then
		menu_checksavedevice_network.back()
	end

end





local Layout=
{
	BoxPos=POS(83,105),
	BoxSize=SIZE(474,261),
	
	TitleFont=fontlarge(),
	TitleColor=GetPaletteColor(34),
	TitleSize=SIZE(20,10),
	TitlePos=POS(14,9),

	UpArrowCenter=POS(502,28),
	DownArrowCenter=POS(502,240),
	
	NrPos=POS(46, 1),
	NrSize=SIZE(40, 40),
	ISPPos=POS(52, 1),
	ISPSize=SIZE(400, 20),
	HardwarePos=POS(52, 20),
	HardwareSize=SIZE(400, 20),
	
	ListLeft=2,
	ListTop=36,
	ListFont=fontmedium(),
	ListNrColor=GetPaletteColor(33),
	ListISPColor=GetPaletteColor(33),
	ListHWColor=GetPaletteColor(34),
	ListSelectedItemColor=GetPaletteColor(14),
	ListDisabledItemColor=GetPaletteColor(2),
	ListItemColor={0,0,0,0.5*MAX_VERTEXCOLOR_A},
	ListNumRows=5,
	RowWidth=470,
	RowHeight=39,
	RowPadding=3,	
}

function StartNetworkConfiguration()
	EnterMenu("menu_multiplayer_networkconfig")
end

local ListWindows

local function ShowMessage()
	for k,v in pairs(ListWindows) do
--	local win = wm.GetWindow("box")
		if v.MaxAlpha then
			v.AnimHandle = AnimateWindowAlpha(v,v.MaxAlpha,0.0,0.2,0.0)
		else
			v.AnimHandle = AnimateWindowAlpha(v,1.0,0.0,0.2,0.0)
		end
	end
	win = wm.GetWindow("message")
	win:ShowWindow()
	win.AnimHandle = AnimateWindowAlpha(win,0.0,1.0,0.2,0.2)	
end

local function ShowList()
	local win = wm.GetWindow("message")
	win:HideWindow()
	for k,v in pairs(ListWindows) do
		if v.MaxAlpha then
			v.AnimHandle = AnimateWindowAlpha(v,v.MaxAlpha,v.MaxAlpha,0.0,0.0,v.AnimHandle)
		else
			v.AnimHandle = AnimateWindowAlpha(v,1.0,1.0,0.0,0.0,v.AnimHandle)
		end
	end
end

local function AddListWin(win)
	table.insert(ListWindows, win)
end

menu_multiplayer_networkconfig = CreateMenuFromTemplate("template_basic")
menu_multiplayer_networkconfig.options.title = TITLE_PS2_NETWORK_CONFIG
menu_multiplayer_networkconfig.back = function() StopNetwork(); EnterMenu("menu_mainmenu"); end

function menu_multiplayer_networkconfig.create(self)
	self.parent:create(self)

	self:addResource("selection_balks.tga",selection_balks,selection_balks_size)
	self:loadResources()
			
	self.items={ }
end

function menu_multiplayer_networkconfig.init(self)
	self.parent:init(self)
	GUI:SetBackground("data/menu/menu_background.tga")
	
	if Network == nil then
		StartNetwork()
	end
	
	ListWindows = { }
	
	local box = Frame { Name="box", Position=Layout.BoxPos, Size=Layout.BoxSize, ShowBorders=TRUE }

	StaticText { Name="message", Title=L"", Position=POS(Layout.BoxSize[1]/2,Layout.BoxSize[2]/2-10), Size=SIZE(640,20), Font=fontlarge(), Color=GetPaletteColor(34), Align=FONTF_CENTER, Parent=box }:HideWindow()
	
	local win = StaticText { Title=HEADER_SELECT_NETWORK_CONFIG, Position=Layout.TitlePos, Size=Layout.TitleSize, Font=Layout.TitleFont, Color=Layout.TitleColor, Parent=box }
	AddListWin(win)
	
	local function MakeArrow(pos, name, iconname)
		local arrowSize = GetResourceSize(self:getResource(iconname))
		win = Frame { Name=name, Position=POS(pos[1] - arrowSize[1] / 2, pos[2] - arrowSize[2] / 2), Size=arrowSize, Parent=box }
		win:AttachResource(self:getResource(iconname))
		AddListWin(win)
	end
	
	MakeArrow(Layout.UpArrowCenter, "uparrow_glow", "scroll_up_glow")
	MakeArrow(Layout.UpArrowCenter, "uparrow", "scroll_up_icon")
	MakeArrow(Layout.DownArrowCenter, "downarrow_glow", "scroll_down_glow")
	MakeArrow(Layout.DownArrowCenter, "downarrow", "scroll_down_icon")
	
	for i = 1,5 do
		local w = Frame { Name="listitembg_row"..i, Position=POS(Layout.ListLeft, Layout.ListTop + (Layout.RowHeight+Layout.RowPadding)*(i-1)), Size=SIZE(Layout.RowWidth, Layout.RowHeight), DrawBackgroundColor=TRUE, Parent=box }
		local c = Layout.ListItemColor
		w:SetColor({c[0],c[1],c[2],0.5*MAX_VERTEXCOLOR_A}, false)
		w.MaxAlpha = 0.5
		AddListWin(w)
	end
	
	local listboxParams={
		ListBoxTemplate={Name="list", Parent=box},
		Left=Layout.ListLeft,
		Top=Layout.ListTop,
		LeftPadding=0,
		RightPadding=0,
		TopPadding=0,
		BottomPadding=0,
		RowWidth=Layout.RowWidth,
		RowHeight=Layout.RowHeight,
		RowPadding=Layout.RowPadding,
		RowTemplate={},
		RowTemplateType="Button",
		RowTemplateCust=function(Row, RowNr)
		end,
		NumRows=Layout.ListNumRows,
		Coloumns={
			[1]={
			Name="number", -- _row# is added
			ColoumnTemplate={Position=Layout.NrPos, Size=Layout.NrSize, Font=Layout.ListFont, Color=Layout.ListNrColor, Align=FONTF_RIGHT },
			ColoumnTemplateType="StaticText",
			ColoumnTemplateCust=function(Coloumn, RowNr, ColoumnNr)
				AddListWin(Coloumn)
			end
			},		

			[2]={
			Name="isp", -- _row# is added
			ColoumnTemplate={Position=Layout.ISPPos, Size=Layout.ISPSize, Font=Layout.ListFont, Color=Layout.ListISPColor },
			ColoumnTemplateType="StaticText",
			ColoumnTemplateCust=function(Coloumn, RowNr, ColoumnNr)
				AddListWin(Coloumn)
			end
			},
			[3]={
			Name="hardware", -- _row# is added
			ColoumnTemplate={Position=Layout.HardwarePos, Size=Layout.HardwareSize, Font=Layout.ListFont,Color=Layout.ListHWColor },
			ColoumnTemplateType="StaticText",
			ColoumnTemplateCust=function(Coloumn, RowNr, ColoumnNr)
				AddListWin(Coloumn)
			end,
			},
		}
	}

	local list=CreateMultiColoumnListBox(listboxParams)
	AddListWin(list)

	list.onNeedData=function(Self, RowObject, RowNr, ControlRowNr)
		local nr=wm.GetWindow("number_row"..ControlRowNr)
		local isp=wm.GetWindow("isp_row"..ControlRowNr)
		local hardware=wm.GetWindow("hardware_row"..ControlRowNr)
		local bg=wm.GetWindow("listitembg_row"..ControlRowNr)
		
		if RowNr == NumConfigurations + 1 then
			nr:HideWindow()
			isp:SetTitle(PS2_CONNECTION_SELECT_CREATE)
			hardware:SetTitle(L"")
		else
			nr:ShowWindow()
			nr:SetTitle(L(NetworkConfiguration.GetCombinationNr(RowNr).."."))
			isp:SetTitle(NetworkConfiguration.GetISP(RowNr))
			hardware:SetTitle(NetworkConfiguration.GetHardware(RowNr))
		end

		local a,c
		if RowNr == list:GetSelectedRow() then
			if bg.AnimHandle and IsAnimationActive(bg.AnimHandle) then
				a = bg:GetColor(true)[4]
			else
				a = 1.0
			end
			c = Layout.ListSelectedItemColor
			bg.MaxAlpha = 1.0
		else
			if bg.AnimHandle and IsAnimationActive(bg.AnimHandle) then
				a = bg:GetColor(true)[4]
			else
				a = 0.5
			end
			c = Layout.ListItemColor
			bg.MaxAlpha = 0.5
		end
		
		if RowNr == NumConfigurations + 1 or NetworkConfiguration.IsConfigurationValid(RowNr) then
			nr:SetColor(Layout.ListNrColor, false)
			isp:SetColor(Layout.ListISPColor, false)
			hardware:SetColor(Layout.ListHWColor, false)
		else
			nr:SetColor(Layout.ListDisabledItemColor, false)
			isp:SetColor(Layout.ListDisabledItemColor, false)
			hardware:SetColor(Layout.ListDisabledItemColor, false)
		end

		if RowNr == list:GetSelectedRow() then
			bg:SetColor({2*c[1]-1,2*c[2]-1,2*c[3]-1,a*MAX_VERTEXCOLOR_A}, false)
		else
			bg:SetColor({2*c[1]-1,2*c[2]-1,2*c[3]-1,a*MAX_VERTEXCOLOR_A}, false)
		end
	end
	
	list.onShowScrollUpArrow=function()
		wm.GetWindow("uparrow_glow"):ShowWindow()
		wm.GetWindow("uparrow"):ShowWindow()
	end
	
	list.onShowScrollDownArrow=function()
		wm.GetWindow("downarrow_glow"):ShowWindow()
		wm.GetWindow("downarrow"):ShowWindow()
	end
	
	list.onHideScrollUpArrow=function()
		wm.GetWindow("uparrow_glow"):HideWindow()
		wm.GetWindow("uparrow"):HideWindow()
	end
	
	list.onHideScrollDownArrow=function()
		wm.GetWindow("downarrow_glow"):HideWindow()
		wm.GetWindow("downarrow"):HideWindow()
	end
	
	local handler=InputHandler{Name="inputhandler"}
	handler.onKeyPressed=function(Self, Character, VirtualKey, ScanCode)
		if GUI:IsMenuAnimating() then
			return
		end

		if State == "SELECTING" then
			if VirtualKey==KeyCodes["BUTTON_START"] then
				if list:GetSelectedRow() == NumConfigurations + 1 then
					MessageBoxActive = true
					MessageBox(
						PS2_CONNECTION_SELECT_STARTCONFIG,
						MESSAGEBOX_YESNO,
						function(value)
							MessageBoxActive = false
							if value == TRUE then
								NetworkConfiguration.LoadNetgui()
							end
						end	
					)
				elseif NetworkConfiguration.IsConfigurationValid(list:GetSelectedRow()) then
					local conf = NetworkConfiguration.GetCombinationNr(list:GetSelectedRow())
					NetworkConfiguration.LoadConfigurationFile(conf)
					ShowThinkingWindow(true)
					ShowMessage()
					GUI:SetHelpButtons(BUTTON_BACK, UI_ABORT)
					State="NETCONF"
				else
					MessageBoxActive = true
					MessageBox(
						TRANSLATOR(PS2_NET_NOT_SUPPORTED),
						MESSAGEBOX_OK,
						function(value)
							MessageBoxActive = false
						end	
					)
				end
				playmenusound_action()
			elseif VirtualKey==KeyCodes["BUTTON_SELECT"] then
				menu_multiplayer_networkconfig.back()
				playmenusound_back()
			elseif VirtualKey==KeyCodes["BUTTON_UP"] then
				list:MovePrev()
				playmenusound_move()
			elseif VirtualKey==KeyCodes["BUTTON_DOWN"] then
				list:MoveNext()
				playmenusound_move()
			end
		elseif State == "NETCONF" then
			if VirtualKey==KeyCodes["BUTTON_SELECT"] then
				State = "SELECTING"
				NetworkConfiguration.Abort()
				HideThinkingWindow()
				ShowList()
				GUI:SetHelpButtons(BUTTON_OK, UI_SELECT, BUTTON_BACK, UI_BACK)
			end
		end
	end		
	handler:SetFocus()

	MessageBoxActive = false

	NumConfigurations = 0
	local res = NetworkConfiguration.PrepareConfigurations()
	NumConfigurations=NetworkConfiguration.GetNumConfigurations()
	list:SetNumRows(NumConfigurations + 1)
	State = "SELECTING"
	
	local c = {0,0,0,0.25*MAX_VERTEXCOLOR_A}
	for i = NumConfigurations + 1, Layout.ListNumRows do
		local win = wm.GetWindow("listitembg_row"..i)
		win:SetColor(c, false)
		win.MaxAlpha = 0.25
	end
	
	CurrentTime = 0
end

function menu_multiplayer_networkconfig.deinit(self)
	self.parent:deinit(self)
end

function menu_multiplayer_networkconfig.update(self,time)
	self.parent:update(self,time)

	local saveState = Save.CheckDeviceState()
	if saveState ~= Save.SAVE_DEVICE_OK then
		if MessageBoxActive then
			GUI:CloseMessageBox()
			MessageBoxActive = false
		end
		HideThinkingWindow()
		if saveState == Save.SAVE_DEVICE_CHANGED then
			Save.SignalDeviceChanged()
		end
		StopNetwork()
		EnterMenu("menu_checksavedevice_network")
		return
	end

	if MessageBoxActive then
		return
	end
	
	if CurrentTime==0 then
		CurrentTime=time
	end
	local dt=time-CurrentTime
	CurrentTime=time
	local win=wm.GetWindow("infomessage")
	if State=="NETCONF" then
		local res = NetworkConfiguration.Update(dt*1000)
		wm.GetWindow("message"):SetTitle(NetworkConfiguration.GetStatusString())
		if res ~= NetworkConfiguration.RES_WAITING then
			if res == NetworkConfiguration.RES_COMPLETED then
				State = "IDLE"
				HideThinkingWindow()
				if CommandLine["-nodnas"] then
					EnterMenu("menu_multiplayer_gamespy_checkavailability")
				else
					EnterMenu("menu_multiplayer_dnas")
				end
			else
				HideThinkingWindow()
				wm.GetWindow("message"):HideWindow()
				MessageBoxActive = true
				MessageBox(NetworkConfiguration.GetErrorString(), MESSAGEBOX_OK,
					function()
						State = "SELECTING"
						ShowList()
						wm.GetWindow("list"):Refresh()
						MessageBoxActive = false
					end
				)
				State="ERROR"
			end
		end
	end
end
