--///////////////////////////////////////////////////////////////////////////
--// PlayersMenu.bed
--///////////////////////////////////////////////////////////////////////////
--// Copyright (c) 2004 Bugbear Entertainment ltd. 
--// All Rights Reserved.
--// 
--// Created on 14.6.2004 14:35:21
--// 
--// Authors: Pasi Matilainen (pasi.matilainen@bugbear.fi)
--///////////////////////////////////////////////////////////////////////////

Layout = OnlineOptionsLayout.PlayersMenuLayout

local GameInvitesEnabled=false
local Mode
local BackAction

local FirstUpdate=true
local Error=false

local MenuState
local PlayersListWindows = {}

local SELECT_PLAYER = 1
local PLAYER_OPTIONS = 2

local Items

-- These are also used in send voice menu
ControllerId=nil
CurrentPlayer=nil
CurrentFriend=nil

MODE_PLAYERS=1
MODE_FRIENDS=2

local EventListener
local BuildMenuButtons
local UpdatePlayersList
local UpdatePlayers
local UpdatePlayerInfo
local ExitPlayersList

local UpdatePlayersListFSM

local function HidePlayersList()
	Event:RemoveListener(EventListener)	

	if UpdatePlayersListFSM then
		FSM_init_state(UpdatePlayersListFSM)
		UpdatePlayersListFSM=nil
	end
	Friends.EndEnumrate()

	if XBOX then
		XBoxLive.GetPlayersList():DeInit()	
		if ControllerId then
			XBoxLive.GetMessageManager():DisableEnumrate(ControllerId)
		end
	end
	wm.RemoveWindow(wm.GetWindow("pl_contentbox"))
--	OptionsPopup.AnimateHide()
end

local function ReturnToSelection()
	MenuState = SELECT_PLAYER
	BuildMenuButtons()
--	wm.GetWindow("pl_itemtitle_bg"):HideWindow()
--	HideButtons()
end

local emptyFunc=function()end

local isSendInviteCompleted = function()
	local transStatus
	if XBOX then
		transStatus = XBoxLive.GetMessageManager():GetTransferStatus()
	else
		transStatus = "SUCCESS"
	end
	return transStatus == "SUCCESS" or transStatus == "FAILED"
end

local isSendRequestCompleted = function()
	local transStatus
	if XBOX then
		transStatus = XBoxLive.GetMessageManager():GetTransferStatus()
	else
		transStatus = "SUCCESS"
	end
	return transStatus == "SUCCESS" or transStatus == "FAILED"
end

function SendFriendRequest()
	if XBOX and Friends.GetNumFriends() >= 100 then
		MessageBox(LIVE_FRIEND_TOO_MANY, MESSAGEBOX_OK, function()end)
	else
		Friends.SendRequest(CurrentPlayer.UserId, false)
		MultiplayerWaitState=FSM()
		ShowThinkingWindow()
		FSM_init_state(MultiplayerWaitState)
		FSM_add_wait_for_event(MultiplayerWaitState, 0.1, emptyFunc, isSendRequestCompleted)
		FSM_add_function(MultiplayerWaitState, function() HideThinkingWindow(); wm.GetWindow("pl_playerslist"):Refresh(); ReturnToSelection(); end, false, {})
	end
end

function SendFriendRequestWithVoice()
	if XBOX and Friends.GetNumFriends() >= 100 then
		MessageBox(LIVE_FRIEND_TOO_MANY, UI_OK, function()end)
	else
		HidePlayersList()
		SendVoiceMessage("R", function() EnterPlayersList(Mode, ControllerId, BackAction, GameInvitesEnabled) end)
	end
end

function AcceptFriendRequest()
	Friends.AnswerRequest(CurrentFriend, "YES");
	ReturnToSelection()
end

function DeclineFriendRequest()
	Friends.AnswerRequest(CurrentFriend, "NO")
	ReturnToSelection()
end

function BlockFriendRequest()
	local block = function()
		Friends.AnswerRequest(CurrentFriend, "BLOCK")
		ReturnToSelection()
	end
	MessageBox(
		LIVE_FRIEND_BLOCK,
		MESSAGEBOX_YESNO,
		function(value)
			if value == TRUE then
				Friends.AnswerRequest(CurrentFriend, "BLOCK")
			end
			ReturnToSelection()
		end
	)
end



function CancelFriendRequest()
	Friends.RemoveFriend(CurrentFriend)	
	ReturnToSelection()
end

function SendGameInvite()
	Friends.SendInvite(CurrentFriend, false)
	if XBOX then
		MultiplayerWaitState=FSM()
		ShowThinkingWindow()
		FSM_init_state(MultiplayerWaitState)
		FSM_add_wait_for_event(MultiplayerWaitState, 0.1, emptyFunc, isSendInviteCompleted)
		FSM_add_function(MultiplayerWaitState, ReturnToSelection, false, {})
		FSM_add_function(MultiplayerWaitState, HideThinkingWindow, false, {})
	else
		ReturnToSelection()
	end
end

function AcceptGameInvite()
	Friends.AnswerInvite(CurrentFriend, "YES")
	if Friends.SameTitle(CurrentFriend) then
		MultiplayerWaitState=FSM()
		FSM_init_state(MultiplayerWaitState)
		local f=function(value)
			if value == TRUE then
				Friends.SetFriendToJoin(CurrentFriend)
				OptionsPopup.Destroy()
				if XBOX then
					EnterMenu("menu_xboxlive")
				else
					EnterMenu("menu_gamespy")
				end
			else
				wm.GetWindow("pl_inputhandler"):SetFocus()
			end
		end
		if Session and Session:HostIsConnected() then
			MessageBox(FRIEND_EXITGAME, MESSAGEBOX_YESNO, f)
		else
			f(TRUE)
		end
	else
		Friends.JoinGame(CurrentFriend)
		local message=LIVE_FRIEND_TOJOIN_1
		message=WStringConcat(message, CurrentFriend.GameTitle)
		message=WStringConcat(message, LIVE_FRIEND_TOJOIN_2)
		MessageBox(message, MESSAGEBOX_OK, function() ReturnToSelection() end)
	end
end

function DeclineGameInvite()
	Friends.AnswerInvite(CurrentFriend, "NO")
	ReturnToSelection()
end

function CancelGameInvite()
	Friends.CancelInvite(CurrentFriend)
	ReturnToSelection()
end

function RemoveFriend()
	local remove=function()
		if CurrentFriend.ReceivedInvite then
			--Friends.AnswerInvite(CurrentFriend, "REMOVE")
			Friends.AnswerInvite(CurrentFriend, "NO")
			Friends.RemoveFriend(CurrentFriend)
		else
			Friends.RemoveFriend(CurrentFriend)
		end
		ReturnToSelection()
	end
	local msg
	if XBOX then
		msg = LIVE_FRIEND_REMOVE_LIST
	else
		msg = GAMESPY_BUDDY_REMOVE_LIST
	end	
	MessageBox(
		msg,
		MESSAGEBOX_YESNO,
		function(result)
			if result == TRUE then
				remove()
			else
				ReturnToSelection()
			end
		end
	)
end


function JoinFriend()
	if Friends.SameTitle(CurrentFriend) then
		local f=function(value)
			if value == TRUE then
				Friends.SetFriendToJoin(CurrentFriend)
				OptionsPopup.Destroy()
				if XBOX then
					EnterMenu("menu_xboxlive")
				else
					EnterMenu("menu_gamespy")
				end
			else
				wm.GetWindow("pl_inputhandler"):SetFocus()
			end
		end
		if Session and Session:HostIsConnected() then
			MessageBox(FRIEND_EXITGAME, MESSAGEBOX_YESNO, f)
		else
			f(TRUE)
		end
	else
		Friends.JoinGame(CurrentFriend)
		local message=LIVE_FRIEND_TOJOIN_1
		message=WStringConcat(message, CurrentFriend.GameTitle)
		message=WStringConcat(message, LIVE_FRIEND_TOJOIN_2)
		MessageBox(message, MESSAGEBOX_OK, ReturnToSelection)		
	end
end

local function SameSession()
	if Session then
		local info = Session:GetInfo()
		local sessId = info.SessionId
		local friendSessId = CurrentFriend.SessionId
		if sessId == friendSessId then
			return true
		end
		for i=1, Session:GetNumPlayers() do
			local player = Session:GetPlayer(i)
			if player.UId == CurrentFriend.UserId then
				return true
			end
		end
	end
	return false
end

local function MutePlayer()
	local userId
	if XBOX then
		userId = XBoxLive.Auth.GetSignedInUserId(XBoxLive.Auth.GetSignedInUserNr(ControllerId))
	else
		userId = GameSpyPresence.GetLoggedInProfileID()
	end
		
	if userId ~= nil then
		local voiceMan = Network:GetVoiceManager()
		local voicePlayer = voiceMan:GetPlayerByPort(ControllerId)
		if CurrentFriend then
			voicePlayer:SetPlayerMuted(CurrentFriend.UserId, true)
			CurrentFriend.Muted = true
		elseif CurrentPlayer then
			voicePlayer:SetPlayerMuted(CurrentPlayer.UserId, true)
			CurrentPlayer.Muted = true
		end
	end
	ReturnToSelection()
end

local function UnMutePlayer()
	local userId
	if XBOX then
		userId = XBoxLive.Auth.GetSignedInUserId(XBoxLive.Auth.GetSignedInUserNr(ControllerId))
	else
		userId = GameSpyPresence.GetSignedInUserId()
	end
	if userId ~= nil then
		local voiceMan = Network:GetVoiceManager()
		local voicePlayer = voiceMan:GetPlayerByPort(ControllerId)
		if CurrentFriend then
			voicePlayer:SetPlayerMuted(CurrentFriend.UserId, false)
			CurrentFriend.Muted = false
		elseif CurrentPlayer then
			voicePlayer:SetPlayerMuted(CurrentPlayer.UserId, false)
			CurrentPlayer.Muted = false
		end
	end	
	ReturnToSelection()
end

local function ShowPlayerInfo(showGame)
	wm.GetWindow("pl_playerstatus"):ShowWindow()
	wm.GetWindow("pl_statustitle"):ShowWindow()
	if showGame then
		wm.GetWindow("pl_playergame"):ShowWindow()
		wm.GetWindow("pl_gametitle"):ShowWindow()
		lastLine = 4
	else
		wm.GetWindow("pl_playergame"):HideWindow()
		wm.GetWindow("pl_gametitle"):HideWindow()
		lastLine = 2
	end
	for i = 1, lastLine do
		wm.GetWindow("pl_statusbg_"..i):ShowWindow()
	end
	for i = lastLine + 1, 4 do
		wm.GetWindow("pl_statusbg_"..i):HideWindow()
	end	
end

local function HidePlayerInfo()
	wm.GetWindow("pl_playerstatus"):HideWindow()
	wm.GetWindow("pl_statustitle"):HideWindow()
	wm.GetWindow("pl_playergame"):HideWindow()
	wm.GetWindow("pl_gametitle"):HideWindow()
	for i = 1, 4 do
		wm.GetWindow("pl_statusbg_"..i):HideWindow()
	end
end

UpdatePlayersList = function()
	local playersList = wm.GetWindow("pl_playerslist")
--[[	if XBOX then
		XBoxLive.GetPlayersList():Update(true)
	else
		GameSpy.GetPlayersList():Update(true)
	end--]]
	if playersList then
		playersList:Refresh()
		local row = playersList:GetSelectedRow()
		if row > 0 then
			UpdatePlayerInfo(row)
		else
			HidePlayerInfo()
		end
	end
end

local function CreateStatusString(Status)
	local status=ConvertToWString("")
	if Status.ReceivedRequest then
		if XBOX then
			status=LIVE_FRIEND_REQUEST_RECEIVED
		else
			status=GAMESPY_BUDDY_RECEIVED
		end
	elseif Status.SentRequest then
		if XBOX then
			status=LIVE_FRIEND_REQUEST_SENT
		else
			status=GAMESPY_BUDDY_SENT
		end
	elseif Status.ReceivedInvite then
		status=LIVE_FRIEND_WANTS
	elseif Status.SentInvite then
		status=LIVE_FRIEND_INVITED
	elseif Status.Playing then
		status=LIVE_FRIEND_PLAYING
	elseif Status.Online then
		status=LIVE_FRIEND_ONLINE
	else --if Status.Friend then
		status=LIVE_FRIEND_OFFLINE
	end

	return status
end	

local function GetStatus(RowNr)
	local status = {}
	local info
	if Mode == MODE_PLAYERS then
		if XBOX then
			info = XBoxLive.GetPlayersList():GetPlayerInfo(RowNr)
		else
			info = GameSpy.GetPlayersList():GetPlayerInfo(RowNr)
		end	
		if info then
			local friend=nil
			if info.IsFriend then
				friend=Friends.GetFriendByUserId(info.UserId)
			end
				
			status.Name=info.Name
			status.InSession=info.InSession
			status.Muted=info.Muted
			status.VoiceThroughSpeakers=info.VoiceThroughSpeakers

			if XBOX or info.InSession or friend==nil then
				status.Voice=info.HasVoice
				if info.InSession then
					status.Talking=info.Talking
				else
					status.Talking=false
				end
			else
				status.Voice=friend.Voice
				status.Talking=false
			end
		
			if XBOX or info.InSession then
				status.Online=info.Online
				status.Playing=info.Playing
				status.GameTitle=info.GameTitle
			elseif friend then
				status.Online=friend.Online
				status.Playing=friend.Playing
				status.GameTitle=friend.GameTitle
			else
				status.Online=false
				status.Playing=false
				status.GameTitle=L""
			end

			if friend then
				status.Friend=true
				status.ReceivedRequest=friend.ReceivedRequest
				status.ReceivedInvite=friend.ReceivedInvite
				status.SentRequest=friend.SentRequest
				status.SentInvite=friend.SentInvite
			else
				status.Friend=false
				status.ReceivedRequest=info.ReceivedRequest
				status.ReceivedInvite=info.ReceivedInvite
				status.SentRequest=false
				status.SentInvite=false
			end
		end
	else
		local friend = Friends.GetFriend(RowNr)
		if friend then
			status.Friend = true
			status.Name = friend.GamerTag
			status.Online = friend.Online
			status.Playing = friend.Playing
			status.GameTitle = friend.GameTitle
			status.Voice = friend.Voice
			status.Talking = false
			status.ReceivedRequest = friend.ReceivedRequest
			status.ReceivedInvite = friend.ReceivedInvite
			status.SentRequest = friend.SentRequest
			status.SentInvite = friend.SentInvite
		else
			status.Name=ConvertToWString("")
			status.Voice=false
			status.Talking=false
			status.Online=false
			status.Playing=false
			status.GameTitle=ConvertToWString("")
			status.Friend=false
			status.ReceivedRequest=false
			status.ReceivedInvite=false
			status.SentRequest=false
			status.SentInvite=false
		end
	end
			
	return status
end

UpdatePlayerInfo = function()
	local playerstatus = wm.GetWindow("pl_playerstatus")
	local playergame = wm.GetWindow("pl_playergame")
	local selectedPlayer = wm.GetWindow("pl_playerslist"):GetSelectedRow()
	
	if selectedPlayer == 0 then
		HidePlayerInfo()
		return
	end

	local status=GetStatus(selectedPlayer)

	if Mode == MODE_PLAYERS then
		--local friend=Friends.GetFriend(PlayerNr)
		if status.Online then
			if not CurrentPlayer or CurrentPlayer.Online ~= status.Online then
--				BuildMenuButtons()
			end
			ShowPlayerInfo(ConvertFromWString(status.GameTitle) ~= "")
			playerstatus:SetTitle(CreateStatusString(status))
			playergame:SetTitle(status.GameTitle)
		elseif status.Friend then
			ShowPlayerInfo(false)
			playerstatus:SetTitle(CreateStatusString(status))
		else
			HidePlayerInfo()
		end
	else
		if not CurrentFriend or CurrentFriend.Online ~= status.Online then
--			BuildMenuButtons()
		end
		if status.Online then
			ShowPlayerInfo(ConvertFromWString(status.GameTitle) ~= "")
			playerstatus:SetTitle(CreateStatusString(status))
			playergame:SetTitle(status.GameTitle)
		else
			ShowPlayerInfo(false)
			playerstatus:SetTitle(CreateStatusString(status))
		end
	end
end

UpdatePlayers = function()
	local playersList = wm.GetWindow("pl_playerslist")
	if playersList == nil then
		return
	end
	
	local playersListObj
	local numRows

	if XBOX then
		playersListObj = XBoxLive.GetPlayersList()
	else
		playersListObj = GameSpy.GetPlayersList()
	end
	
	if Mode == MODE_PLAYERS then
		playersListObj:Update()
		numRows = playersListObj:GetNumCurrentPlayers() + playersListObj:GetNumRecentPlayers()
		playersList:SetNumRows(numRows)
		if numRows == 0 then
			if not Error then
				Error = true
				MessageBox(LIVE_PLAYERS_EMPTY, MESSAGEBOX_OK, function(value) if value == TRUE then ExitPlayersList() end end)
			end
		elseif FirstUpdate then
			UpdatePlayersList()
			if XBOX then
				CurrentPlayer = XBoxLive.GetPlayersList():GetPlayerInfo(1)
			else
				CurrentPlayer = GameSpy.GetPlayersList():GetPlayerInfo(1)
			end
			if CurrentPlayer.IsFriend then
				CurrentFriend = Friends.GetFriendByUserId(CurrentPlayer.UserId)
			else
				CurrentFriend = nil
			end
--			UpdatePlayerInfo(1)
			FirstUpdate = false
		else
			UpdatePlayersList()
		end
	elseif Mode == MODE_FRIENDS then
		numRows = Friends.GetNumFriends()
		playersList:SetNumRows(numRows)
		if Friends.IsResultsReady() and FirstUpdate or Friends.IsResultsUpdated() and not Error then
			UpdatePlayersList()
			UpdatePlayerInfo(playersList:GetSelectedRow())
			if numRows == 0 then
				--[[if not Error then
					Error = true
					MessageBox(
						FRIENDS_EMPTY,
						MESSAGEBOX_OK,
						BackAction
					)
				end--]]
			elseif MenuState == SELECT_PLAYER then -- Bad things happen if we change CurrentFriend in player options state
				CurrentPlayer = nil
				CurrentFriend = Friends.GetFriend(playersList:GetSelectedRow())
			end
--			UpdatePlayersList()
			if FirstUpdate then
--				BuildMenuButtons()
			end
			FirstUpdate = false
		end
	end

--	if numRows > 0 then
--		UpdatePlayerInfo(playersList:GetSelectedRow())
--[[		if Mode == MODE_FRIENDS and CurrentFriend then
			UpdatePlayerInfo(playerslist:GetSelectedRow())
			wm.GetWindow("playerstatus"):SetTitle(GetFriendStatusString())
		elseif CurrentPlayer then
			wm.GetWindow("playerstatus"):SetTitle(GetPlayerStatusString())
		end--]]
--	end
end

function EnterPlayersList(mode, controllerId, backAction, enableGameInvites, createPopup)
	Mode = mode
	ControllerId = controllerId
	GameInvitesEnabled = enableGameInvites
	BackAction = backAction
	MenuState = SELECT_PLAYER
	CreatePopup = createPopup
	
	local userNr
	local userId
	if XBOX then
		userNr = XBoxLive.Auth.GetSignedInUserNr(ControllerId)
		userId = XBoxLive.Auth.GetSignedInUserId(userNr)
		XBoxLive.GetPlayersList():SetUserIndex(ControllerId)
		XBoxLive.GetPlayersList():Init()
	else
		GameSpy.GetPlayersList():SetUserIndex(GameSpyPresence.GetLoggedInProfileID())
	end

	Friends.SetUserIndex(ControllerId)
	Friends.Enumrate()
	if XBOX then
		XBoxLive.GetMessageManager():EnableEnumrate(ControllerId)
	end
	
	local fsm=FSM()
	FSM_init_state(fsm)
	FSM_add_function(fsm, UpdatePlayers,FALSE,{})
	FSM_add_delay_state(fsm, 0.2)
	FSM_add_reset(fsm)
	UpdatePlayersListFSM=fsm
	
	ShowPlayersListUI()
end

ExitPlayersList = function()
	BackAction()
end


local function PlayersListEvents(event)
	if event.id == EVENT_FIND_SESSIONS_COMPLETED then
		HideThinkingWindow()
		if SessionList:GetNumSessions()==0 then
			MessageBox(MULTIPLAYER_NOSESSION, MESSAGEBOX_OK, ReturnToSelection) 
		else
			SessionList:SetSessionNum(1)
			SessionList:JoinSession()
		end
	elseif event.id == EVENT_NETWORK_REQUEST_PLAYERUPDATE then
		local player=Session:GetLocalPlayer(1)

		if XBOX then
			player.Name = XBoxLive.Auth.GetSignedInUserName(1)
			player.UId = XBoxLive.Auth.GetSignedInUserId(1)
		else
			player.Name = L(GameSpyPresence.GetAccountProfileName())
			player.UId = GameSpyPresence.GetLoggedInProfileID()
		end
		
		local info = Session:GetInfo()

		if info.CarClass > 4 then
			player.Car = info.CarClass - 5
		elseif info.CarClass ~= SessionInfo.CarClass.Any then
			local classCars = CarlistFromClass(info.CarClass - 1, false, true)
			player.Car = classCars[0]
		else
			player.Car = 0
		end

		player.CarSkin=1
		--player.Score = 0
		if info.CarUpgrades ~= SessionInfo.CarUpgrades.Any then
			player.UpgradeLevel = info.CarUpgrades
		else
			player.UpgradeLevel = SessionInfo.CarUpgrades.Full
		end
	elseif event.id == EVENT_NETWORK_JOIN_RESULT then
		HideThinkingWindow()
		if event.data == 0 then
			local msg
			if XBOX then
				msg = LIVE_CANNOTJOINFRIEND
			else
				msg = MULTIPLAYER_CANNOTJOINFRIEND
			end
			MessageBox(msg, MESSAGEBOX_OK, ReturnToSelection) 
		elseif event.data == 1 then
			--HidePlayersList()
			OptionsPopup.Destroy()

			local backmenu
			if XBOX then
				MultiplayerMode = MPMODE_XBOXLIVE
				backmenu = "menu_xboxlive"
			else
				MultiplayerMode = MPMODE_GAMESPY
				backmenu = "menu_multiplayer_gamespy"
			end

			ShowLobby(backmenu)
		end
	elseif event.id == EVENT_FRIEND_REQUEST_COMPLETE then
		HideThinkingWindow()
		if event.data == Friends.FRR_SUCCESS then
			wm.RemoveWindow(wm.GetWindow("pl_virtualkeyboard"))
			wm.GetWindow("pl_contentbox"):ShowWindow()
			wm.GetWindow("pl_inputhandler"):SetFocus()
			ReturnToSelection()
		else
			local msg = L""
			if event.data == Friends.FRR_SELF then
				msg = LIVE_IMAGINARY_FRIEND
--			elseif event.data == Friends.FRR_LIST_FULL then
--				msg = L"UNABLE TO ADD THE SPECIFIED FRIEND SINCE YOUR FRIENDS LIST IS FULL."
			elseif event.data == Friends.FRR_USER_NOT_FOUND then
				msg = WStringConcat(MULTIPLAYER_PLAYER, L" ")
				msg = WStringConcat(msg, wm.GetTextInput())
				msg = WStringConcat(msg, L" ")
				msg = WStringConcat(msg, MULTIPLAYER_WASNOTFOUND)
			end
			MessageBox(msg, MESSAGEBOX_OK,
				function()
					wm.RemoveWindow(wm.GetWindow("pl_virtualkeyboard"))
					wm.GetWindow("pl_contentbox"):ShowWindow()
					wm.GetWindow("pl_inputhandler"):SetFocus()
					ReturnToSelection()
				end
			)
		end
	end
end



menu_multiplayer_players = CreateMenuFromTemplate("template_basic")
menu_multiplayer_players.options.title = L""
menu_multiplayer_players.back = function() ReturnToSelection() end



local function AddFriend()
	if XBOX and Friends.GetNumFriends() >= 100 then
		MessageBox(LIVE_FRIEND_TOO_MANY, MESSAGEBOX_OK, function()end)
		return
	end

	OptionsPopup.ClearButtons()
	
	wm.SetTextInput(L"")
	
	wm.GetWindow("pl_contentbox"):HideWindow()

	local maxsize
	if XBOX then
		maxsize = 15
	else
		maxsize = 20
	end
	
	local kb=VirtualKeyboard { Name="pl_virtualkeyboard", Font=fontmedium(),Title=HEADER_MULTIPLAYER_ENTERNAME,TitleFont=fontlarge(),MaxSize=maxsize,
		TitleResources={ wm.GetResource("keyboard_title_bars_tip"), wm.GetResource("keyboard_title_bars_main") },
		InputResources={ wm.GetResource("keyboard_title_bars_tip2"), wm.GetResource("keyboard_title_bars_main2") },
		KeyboardResources={ wm.GetResource("keyboard_bg_tip"), wm.GetResource("keyboard_bg_main")},
		Layer=5, Parent=wm.GetWindow("options_bg") }

--	local kb=VirtualKeyboard { Name="pl_virtualkeyboard", Font=fontsmall(), TitleFont=fontlarge(), MaxSize=maxsize, Layer=5, Parent=wm.GetWindow("options_bg") }
--	kb:AttachResource(fontmedium())
--	kb:SetTitle(HEADER_MULTIPLAYER_ENTER_NAME) -- TODO: Show this

	kb:SetFocus()

	kb.onBack = function(self)
		--kb:HideWindow()
		wm.RemoveWindow(kb)
		wm.GetWindow("pl_contentbox"):ShowWindow()
		wm.GetWindow("pl_inputhandler"):SetFocus()
		ReturnToSelection()
	end

	kb.onAction = function(self)
		if ConvertFromWString(wm.GetTextInput()) ~= "" then
			ShowThinkingWindow()
			Friends.SendRequest(ConvertFromWString(wm.GetTextInput()))
		end
	end
end

local function ShowMultiPlayerProfile()
	local name
	local uid
	if CurrentFriend then
		name = CurrentFriend.GamerTag
		uid = CurrentFriend.UserId
	else
		name = CurrentPlayer.Name
		uid = CurrentPlayer.UserId
	end
	OptionsPopup.ClearButtons()
	HidePlayersList()
	EnterMultiPlayerProfile(name, uid, function() OptionsPopup.DeInit(); EnterPlayersList(Mode, ControllerId, BackAction, GameInvitesEnabled); end)
end

local function ShowFeedback()
	local name
	local uid
	if CurrentFriend then
		name = CurrentFriend.GamerTag
		uid = CurrentFriend.UserId
	else
		name = CurrentPlayer.Name
		uid = CurrentPlayer.UserId
	end
	OptionsPopup.ClearButtons()
	HidePlayersList()
	SendFeedback(name, uid, function() EnterPlayersList(Mode, ControllerId, BackAction, GameInvitesEnabled) end, true)	
end

local function ShowPlayerOptions()
	-- KLUDGE
	if Mode == MODE_FRIENDS and Friends.GetNumFriends() == 0 then
		return
	end
	
	local row = wm.GetWindow("pl_playerslist"):GetSelectedRow()
	if row > 0 then
		if Mode == MODE_FRIENDS then
			CurrentFriend = Friends.GetFriend(row)
			CurrentPlayer = nil
		else
			if XBOX then
				CurrentPlayer = XBoxLive.GetPlayersList():GetPlayerInfo(row)
			else
				CurrentPlayer = GameSpy.GetPlayersList():GetPlayerInfo(row)
			end
			if CurrentPlayer.IsFriend then
				CurrentFriend = Friends.GetFriendByUserId(CurrentPlayer.UserId)
			else
				CurrentFriend = nil
			end
		end
	end

	MenuState = PLAYER_OPTIONS
	--ActiveItem = 1
	BuildMenuButtons()
end

local function AddMenuButton(title_, action_, icon_)
	table.insert(OptionsPopup.Buttons, { titles={title_}, action=action_, icons={icon_} } )
end

BuildMenuButtons = function(activeItem)
	local bb
	OptionsPopup.ClearButtons()
		
	if MenuState == SELECT_PLAYER then
--		if Friends.GetNumFriends() > 0 then
		local title
		if Mode == MODE_PLAYERS then
			title = ICON_MULTIPLAYER_PLAYER
		else
			if XBOX then
				title = ICON_LIVE_SELECTFRIEND
			else
				title = ICON_MULTIPLAYER_SELECTBUDDY
			end
		end
		AddMenuButton(title, function() ShowPlayerOptions() end, "icon_select_player")
--		end
			
		if Mode == MODE_FRIENDS and (not XBOX or Friends.GetNumFriends() < 100) then
			if XBOX then
				title = ICON_LIVE_ADDFRIEND
			else
				title = ICON_MULTIPLAYER_ADDBUDDY
			end
			AddMenuButton(title, function() AddFriend() end, "icon_add_friend")
		end
	else	
		if XBOX then
			AddMenuButton(ICON_MULTIPLAYER_PLAYER_PROFILE, function() ShowMultiPlayerProfile() end, "icon_player_profile")
		end
		if XBOX and Mode == MODE_PLAYERS then
			AddMenuButton(ICON_LIVE_PLAYER_SENDFEEDBACK, function() ShowFeedback() end, "icon_send_feedback")
		end	
		
		local player
		if Mode == MODE_PLAYERS and XBOX then
			player = CurrentPlayer
		else
			player = CurrentFriend
		end
		
		if player then		
			if player.ReceivedRequest then
				if XBOX then
					title = ICON_LIVE_PLAYER_ACCEPTFRIENDREQUEST
				else
					title = ICON_GAMESPY_PLAYER_ACCEPTBUDDYREQUEST
				end
				AddMenuButton(title, function() AcceptFriendRequest() end, "icon_accept_friend_request")
				if XBOX then
					title = ICON_LIVE_PLAYER_DECLINEFRIENDREQUEST
				else
					title = ICON_GAMESPY_PLAYER_DECLINEBUDDYREQUEST
				end
				AddMenuButton(title, function() DeclineFriendRequest() end, "icon_decline_friend_request")
				if XBOX then
					AddMenuButton(ICON_LIVE_PLAYER_BLOCKFRIENDREQUEST, function() BlockFriendRequest() end, "icon_block_friend_request")

					local requestMessage=XBoxLive.GetMessageManager():GetRequestMessage(ControllerId, player.UserId)
					if requestMessage and requestMessage.HasVoice then
						local userId = XBoxLive.Auth.GetSignedInUserId(XBoxLive.Auth.GetSignedInUserNr(ControllerId))
						if userId ~= nil then
							local voiceMan = Network:GetVoiceManager()
							local voicePlayer = voiceMan:GetPlayer(userId)
							if voicePlayer:IsVoiceBanned() == false then
								AddMenuButton(ICON_LIVE_VOICEMESSAGE, function() HidePlayersList(); ListenToVoiceMessage("R", requestMessage.MessageId, function() EnterPlayersList(Mode, ControllerId, BackAction, GameInvitesEnabled) end); end, "icon_listen_to_voice_message")
							end
						end
					end
				end
			elseif player.SentRequest then
				if XBOX then
					AddMenuButton(ICON_LIVE_PLAYER_CANCELFRIENDREQUEST, function() CancelFriendRequest() end, "icon_cancel_friend_request")
				end
			else
				if XBOX then
					title = ICON_LIVE_PLAYER_REMOVEFRIEND
				else
					title = ICON_GAMESPY_PLAYER_REMOVEBUDDY
				end
				AddMenuButton(title, function() RemoveFriend() end, "icon_remove_friend")			
			end

			if player.ReceivedInvite then
				if XBOX then
					title = ICON_LIVE_PLAYER_ACCEPTGAMEINVITE
				else
					title = ICON_GAMESPY_PLAYER_ACCEPTGAMEINVITE
				end
				AddMenuButton(title, function() AcceptGameInvite() end, "icon_accept_game_invite")
				if XBOX then
					title = ICON_LIVE_PLAYER_DECLINEGAMEINVITE
				else
					title = ICON_GAMESPY_PLAYER_DECLINEGAMEINVITE
				end
				AddMenuButton(title, function() DeclineGameInvite() end, "icon_decline_game_invite")
				if XBOX then
					local inviteMessage = XBoxLive.GetMessageManager():GetInviteMessage(ControllerId, player.UserId)
					if inviteMessage and inviteMessage.HasVoice then
						local userId = XBoxLive.Auth.GetSignedInUserId(XBoxLive.Auth.GetSignedInUserNr(ControllerId))
						if userId ~= nil then
							local voiceMan = Network:GetVoiceManager()
							local voicePlayer = voiceMan:GetPlayer(userId)
							if voicePlayer:IsVoiceBanned() == false then
								AddMenuButton(ICON_LIVE_VOICEMESSAGE, function() HidePlayersList(); ListenToVoiceMessage("I", inviteMessage.MessageId, function() EnterPlayersList(Mode, ControllerId, BackAction, GameInvitesEnabled) end); end, "icon_listen_to_voice_message")
							end
						end
					end
				end
			else
				if player.Playing and not SameSession(player) then
					if XBOX then
						title = ICON_LIVE_PLAYER_JOINFRIEND
					else
						title = ICON_GAMESPY_PLAYER_JOINBUDDY
					end
					AddMenuButton(title, function() JoinFriend() end, "icon_join_friend")
				end
				if GameInvitesEnabled then
					if player.SentInvite then
						if XBOX then
							title = ICON_LIVE_PLAYER_CANCELGAMEINVITE
						else
							title = ICON_GAMESPY_PLAYER_CANCELGAMEINVITE
						end
--						if XBOX then
							AddMenuButton(title, function() CancelGameInvite() end, "icon_cancel_game_invite")
--						end
					else
						local localVoicePlayer = Network:GetVoiceManager():GetPlayerByPort(ControllerId)
						if XBOX and localVoicePlayer:GetHeadsetConnected() and not SameSession(player) then
							AddMenuButton(ICON_LIVE_PLAYER_SENDGAMEINVITEVOICE, function() HidePlayersList(); SendVoiceMessage("I", function() EnterPlayersList(Mode, ControllerId, BackAction, GameInvitesEnabled) end) end, "icon_send_game_invite_with_voice_message")
						end
						if (XBOX or Friends.SameTitle(player)) and not SameSession(player) then
							if XBOX then
								title = ICON_LIVE_PLAYER_SENDGAMEINVITE
							else
								title = ICON_GAMESPY_PLAYER_SENDGAMEINVITE
							end
							AddMenuButton(title, function() SendGameInvite() end, "icon_send_game_invite")
						end
					end
				end
			end
			
			if player.Muted then
				AddMenuButton(ICON_MULTIPLAYER_PLAYER_UNMUTE, function() UnMutePlayer() end, "icon_unmute_player")
			else
				AddMenuButton(ICON_MULTIPLAYER_PLAYER_MUTE, function() MutePlayer() end, "icon_mute_player")
			end
		else
			local localVoicePlayer = Network:GetVoiceManager():GetPlayerByPort(ControllerId)
			if not XBOX or Friends.GetNumFriends() < 100 then
				if XBOX and localVoicePlayer:GetHeadsetConnected() then
					AddMenuButton(ICON_LIVE_PLAYER_SENDFRIENDREQUESTVOICE, function() SendFriendRequestWithVoice() end, "icon_send_friend_request_with_voice_message")
				end
				if XBOX then
					title = ICON_LIVE_PLAYER_SENDFRIENDREQUEST
				else
					title = ICON_GAMESPY_PLAYER_SENDBUDDYREQUEST
				end
				AddMenuButton(title, function() SendFriendRequest() end, "icon_send_friend_request_with_voice_message")
			end
			if CurrentPlayer.Muted then
				AddMenuButton(ICON_MULTIPLAYER_PLAYER_UNMUTE, function() UnMutePlayer() end, "icon_unmute_player")
			else
				AddMenuButton(ICON_MULTIPLAYER_PLAYER_MUTE, function() MutePlayer() end, "icon_mute_player")
			end
		end
	end
	
	OptionsPopup.ShowButtons(activeItem or 1)
end

function ShowPlayersListUI()
	OptionsPopup.DeInit = function()
		HidePlayersList()
	end
	
	PlayersListWindows = { }
	
	EventListener = Event:AddListener(PlayersListEvents, EVENTTYPE_NETWORK)
	
	OptionsPopup.Resize(Layout.BoxPos, Layout.BoxSize)
	OptionsPopup.SetMenuTitle(TITLE_LIVE_OPTIONS)
	OptionsPopup.SetHelpButtons(UI_BACK, UI_SELECT)
	
	--OptionsPopup.AnimateShow()
	--OptionsPopup.AnimateSize(Layout.BoxSize)
	
	local bgbox = wm.GetWindow("options_box")			
	local contentbox = Frame { Name="pl_contentbox", Position=POS(0,0), Size=pack(bgbox:GetSize()), Layer=5, Parent=bgbox }
	
	local title = StaticText { Position=Layout.TitlePos, Size=Layout.TitleSize, Font=Layout.TitleFont, Color=Layout.TitleColor, Parent=contentbox, Layer=5 }
	if Mode == MODE_FRIENDS then
		if XBOX then
			title:SetTitle(HEADER_LIVE_FRIENDS)
		else
			title:SetTitle(HEADER_GAMESPY_BUDDIES)
		end
	else
		if XBOX then
			title:SetTitle(HEADER_LIVE_PLAYERS)
		else
			title:SetTitle(HEADER_GAMESPY_PLAYERS)
		end
	end
	
	local scrollDownArrow = Button { Position=Layout.ScrollDownArrowPos, Size=wm.GetResourceSize(wm.GetResource("scroll_arrow_down")), Parent=contentbox, Layer=5 }
	local scrollUpArrow = Button { Position=Layout.ScrollUpArrowPos, Size=wm.GetResourceSize(wm.GetResource("scroll_arrow_up")), Parent=contentbox, Layer=5 }

	scrollDownArrow:AttachResource(wm.GetResource("scroll_arrow_down"))
	scrollUpArrow:AttachResource(wm.GetResource("scroll_arrow_up"))
	scrollDownArrow:HideWindow()
	scrollUpArrow:HideWindow()
	
	local listboxParams={
		ListBoxTemplate={ Name="pl_playerslist", ShowBorders=FALSE, Parent=contentbox, Layer=5 },
		Left=Layout.ListPos[1],
		Top=Layout.ListPos[2],
		LeftPadding=0,
		RightPadding=0,
		TopPadding=0,
		BottomPadding=0,
		RowWidth=Layout.ListWidth,
		RowHeight=Layout.ListRowHeight,
		RowPadding=Layout.ListRowPadding,
		RowTemplate={DrawBackgroundColor=TRUE, Layer=5},
		RowTemplateType="Frame",
		RowTemplateCust=function(Row, RowNr)
		end,
		NumRows=Layout.ListNumRows,
		Coloumns={
			[1]={
			Name="pl_num", -- _row# is added
			ColoumnTemplate={Position=Layout.ListNumPos, Size=Layout.ListNumSize, Font=Layout.ListFont, DrawBackgroundColor=FALSE, ShowBorders=FALSE, Align=FONTF_CENTER, Layer=5},
			ColoumnTemplateType="StaticText",
			ColoumnTemplateCust=function(Coloumn, RowNr, ColoumnNr)
			end
			},
			[2]={
			Name="pl_statusicon", -- _row# is added
			ColoumnTemplate={Position=Layout.ListStatusIconPos, Size=wm.GetResourceSize("xbox_friend_online"), DrawBackgroundColor=FALSE, ShowBorders=FALSE, Layer=5},
			ColoumnTemplateType="Frame",
			ColoumnTemplateCust=function(Coloumn, RowNr, ColoumnNr)
--				Coloumn:AttachResource(wm.GetResource("xbox_friend_online"))
				Coloumn:HideWindow()
			end
			},
			[3]={
			Name="pl_voiceicon", -- _row# is added
			ColoumnTemplate={Position=Layout.ListVoiceIconPos, Size=wm.GetResourceSize("xbox_voice_communicator"), DrawBackgroundColor=FALSE, ShowBorders=FALSE, Layer=5},
			ColoumnTemplateType="Frame",
			ColoumnTemplateCust=function(Coloumn, RowNr, ColoumnNr)
--				Coloumn:AttachResource(wm.GetResource("xbox_voice_communicator"))
				Coloumn:HideWindow()
			end
			},
			[4]={
			Name="pl_flagicon", -- _row# is added
			ColoumnTemplate={Position=Layout.ListFlagIconPos, Size=SIZE(20,13), Layer=5},
			ColoumnTemplateType="Frame",
			ColoumnTemplateCust=function(Coloumn, RowNr, ColoumnNr)
			end
			},
			[5]={
			Name="pl_playername", -- _row# is added
			ColoumnTemplate={Position=Layout.ListNamePos, Size=Layout.ListNameSize, Font=Layout.ListFont, DrawBackgroundColor=FALSE, ShowBorders=FALSE, Layer=5},
			ColoumnTemplateType="StaticText",
			ColoumnTemplateCust=function(Coloumn, RowNr, ColoumnNr)
			end
			},
		}
	}
	
	
	local playerslist=CreateMultiColoumnListBox(listboxParams)

	playerslist.onNeedData=function(Self, RowObject, RowNr, ControlRowNr)
		local num=wm.GetWindow("pl_num_row"..ControlRowNr)
		local voiceicon=wm.GetWindow("pl_voiceicon_row"..ControlRowNr)
		local statusicon=wm.GetWindow("pl_statusicon_row"..ControlRowNr)
		local flag=wm.GetWindow("pl_flagicon_row"..ControlRowNr)
		local playername=wm.GetWindow("pl_playername_row"..ControlRowNr)
		local friend=nil
		
		local status = GetStatus(RowNr)
--[[		if Mode == MODE_PLAYERS then
			local player

			if XBOX then
				player = XBoxLive.GetPlayersList():GetPlayerInfo(RowNr)
			else
				player = GameSpy.GetPlayersList():GetPlayerInfo(RowNr)
			end

			playername:SetTitle(player.Name)

			if player.IsFriend then
				friend = Friends.GetFriendByUserId(player.UserId)
			end

			if player.Muted then
				voiceicon:AttachResource(wm.GetResource("xbox_voice_muted"))
				voiceicon:ShowWindow()
			elseif player.HasVoice then
				if player.Talking then
					voiceicon:AttachResource(wm.GetResource("xbox_talking"))
				elseif player.VoiceThroughSpeakers then
					voiceicon:AttachResource(wm.GetResource("xbox_voice_tv"))
				else
					voiceicon:AttachResource(wm.GetResource("xbox_voice_communicator"))
				end
				voiceicon:ShowWindow()
			else
				voiceicon:HideWindow()
			end
		else
			friend = Friends.GetFriend(RowNr)--]]
			playername:SetTitle(status.Name)

			if status.Muted then
				voiceicon:AttachResource(wm.GetResource("xbox_voice_muted"))
				voiceicon:ShowWindow()
			elseif status.Voice then
				if status.VoiceThroughSpeakers then
					voiceicon:AttachResource(wm.GetResource("xbox_voice_tv"))
				else
					voiceicon:AttachResource(wm.GetResource("xbox_voice_communicator"))
				end
				voiceicon:ShowWindow()
			else
				voiceicon:HideWindow()
			end
--		end
		
		num:SetTitle(L(RowNr.."."))
		
--		if friend then
			statusicon:ShowWindow()
			if status.ReceivedRequest then
				statusicon:AttachResource(wm.GetResource("xbox_friend_invite_received"))
			elseif status.SentRequest then
				statusicon:AttachResource(wm.GetResource("xbox_friend_sent"))
			elseif status.ReceivedInvite then
				statusicon:AttachResource(wm.GetResource("xbox_game_invite_received"))
			elseif status.SentInvite then
				statusicon:AttachResource(wm.GetResource("xbox_game_invite_sent"))
			elseif status.Online then
				statusicon:AttachResource(wm.GetResource("xbox_friend_online"))
			else
				statusicon:HideWindow()
			end
--		else
--			statusicon:HideWindow()
--		end

		if playerslist:GetSelectedRow() == RowNr then
			local c = Layout.ListSelectedBgColor
			c[4] = 0.5 * MAX_VERTEXCOLOR_A
			if PS2 then
				RowObject:SetColor({c[1]*2,c[2]*2,c[3]*2,c[4]}, false)
			else
				RowObject:SetColor(c, false)
			end
			playername:SetColor(Layout.ListSelectedFontColor, false)
			num:SetColor(Layout.ListSelectedFontColor, false)
		else
			local c = Layout.ListBgColor
			c[4] = 0.5 * MAX_VERTEXCOLOR_A
			if PS2 then
				RowObject:SetColor({c[1]*2-1,c[2]*2-1,c[3]*2-1,c[4]}, false)
			else
				RowObject:SetColor(c, false)
			end
			playername:SetColor(Layout.ListFontColor, false)
			num:SetColor(Layout.ListFontColor, false)
		end
	end
	
	playerslist.onShowScrollUpArrow=function()
		scrollUpArrow:ShowWindow()
	end
	
	playerslist.onHideScrollUpArrow=function()
		scrollUpArrow:HideWindow()
	end
	
	playerslist.onShowScrollDownArrow=function()
		scrollDownArrow:ShowWindow()
	end
	
	playerslist.onHideScrollDownArrow=function()
		scrollDownArrow:HideWindow()
	end
	
	playerslist.onSelectedRowChanged=function(Self, RowNr)
		if Mode == MODE_FRIENDS then
			CurrentPlayer = nil
			CurrentFriend = Friends.GetFriend(RowNr)
		else
			if XBOX then
				CurrentPlayer = XBoxLive.GetPlayersList():GetPlayerInfo(RowNr)
			else
				CurrentPlayer = GameSpy.GetPlayersList():GetPlayerInfo(RowNr)
			end

			if CurrentPlayer.IsFriend then
				CurrentFriend = Friends.GetFriendByUserId(CurrentPlayer.UserId)
			else
				CurrentFriend = nil
			end
		end
		UpdatePlayerInfo(RowNr)
	end
	
	playerslist:SetNumRows(0)
	
	for i = 1, 4 do
		local ypos = Layout.StatusBoxTop + (i - 1) * (Layout.ListRowHeight + Layout.ListRowPadding)
		local frame = Frame { Name="pl_statusbg_"..i, Position=POS(Layout.StatusBoxLeft, ypos), Size=Layout.StatusRowSize, DrawBackgroundColor=FALSE, Parent=contentbox }
		frame:AttachResource(wm.GetResource("wide_black_bar_50"))
		frame:HideWindow()
	end
	
	local ypos = Layout.StatusLabelTop
	local win = StaticText { Name="pl_statustitle", Title=LIVE_FRIENDS_STATUS, Position=POS(Layout.StatusLabelLeft, ypos), Size=Layout.StatusLabelSize, Color=Layout.StatusLabelFontColor, Font=Layout.StatusFont, Parent=contentbox, Layer=5 }
	win:HideWindow()

	ypos = ypos + Layout.ListRowHeight + Layout.ListRowPadding
	win = StaticText { Name="pl_playerstatus", Title=L"", Position=POS(Layout.StatusLabelLeft, ypos), Size=Layout.StatusLabelSize, Color=Layout.StatusTextFontColor, Font=Layout.StatusFont, Parent=contentbox, Layer=5 }
	win:HideWindow()

	ypos = ypos + Layout.ListRowHeight + Layout.ListRowPadding
	win = StaticText { Name="pl_gametitle", Title=LIVE_FRIENDS_GAME, Position=POS(Layout.StatusLabelLeft, ypos), Size=Layout.StatusLabelSize, Color=Layout.StatusLabelFontColor, Font=Layout.StatusFont, Parent=contentbox, Layer=5 }
	win:HideWindow()
	
	ypos = ypos + Layout.ListRowHeight + Layout.ListRowPadding
	win = StaticText { Name="pl_playergame", Title=L"", Position=POS(Layout.StatusLabelLeft, ypos), Size=Layout.StatusLabelSize, Color=Layout.StatusTextFontColor, Font=Layout.StatusFont, Parent=contentbox, Layer=5 }
	win:HideWindow()

	local handler = InputHandler { Name="pl_inputhandler", Parent=contentbox }
	handler.onKeyPressed = function(Self, Character, VirtualKey, ScanCode)
		if ScanCode ~= ControllerId then
			return
		end
		
		-- Handle menubar input for both modes
		if VirtualKey == KeyCodes["BUTTON_LEFT"] then
			OptionsPopup.MoveLeft()
			playmenusound_move()
		elseif VirtualKey == KeyCodes["BUTTON_RIGHT"] then
			OptionsPopup.MoveRight()
			playmenusound_move()
		elseif VirtualKey == KeyCodes["BUTTON_START"] then
			OptionsPopup.Buttons[OptionsPopup.ActiveButton].action()
			playmenusound_action()
		elseif MenuState == SELECT_PLAYER then
			-- Player selection input
			local playerslist = wm.GetWindow("pl_playerslist")
			if VirtualKey == KeyCodes["BUTTON_SELECT"] then
				ExitPlayersList()
				playmenusound_back()
			elseif VirtualKey == KeyCodes["BUTTON_UP"] then
				playerslist:MovePrev()
				UpdatePlayerInfo(playerslist:GetSelectedRow())
				playmenusound_move()
			elseif VirtualKey == KeyCodes["BUTTON_DOWN"] then
				playerslist:MoveNext()
				UpdatePlayerInfo(playerslist:GetSelectedRow())
				playmenusound_move()
			end
		elseif MenuState == PLAYER_OPTIONS then
			-- Player options input
			if VirtualKey == KeyCodes["BUTTON_SELECT"] then
				ReturnToSelection()
				playmenusound_back()
			end
		end
	end
	
	BuildMenuButtons()
	
	handler:SetFocus()
	FirstUpdate = true
	Error = false
end
