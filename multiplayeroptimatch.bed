--///////////////////////////////////////////////////////////////////////////
--// Optimatch.bed
--///////////////////////////////////////////////////////////////////////////
--// Copyright (c) 2005 Bugbear Entertainment ltd. 
--// All Rights Reserved.
--// 
--// Created on 30.9.2005
--// 
--// Authors: Pasi Matilainen (pasi.matilainen@bugbear.fi)
--///////////////////////////////////////////////////////////////////////////

dofile("data/menu/backdrops3.bed")

function EnterOptimatchMenu(backmenu)
	menu_multiplayer_optimatch.backmenu = backmenu
	menu_multiplayer_optimatchresults.backmenu = backmenu
	menu_multiplayer_lobby.backmenu = backmenu
	EnterMenu("menu_multiplayer_optimatch")
end

local Layout=
{
	ListLeft=0,
	ListTop=116,
	ListFont=fontmedium(),
	
	LabelLeft=297,
	LabelFontColor=GetPaletteColor(33),
	
	OptionLeft=313,
	OptionWidth=327,
	OptionFontColor=GetPaletteColor(34),
	OptionDisabledFontColor=GetPaletteColor(2),
	OptionArrowIndentTop=4,
	OptionArrowIndentLeftRight=5,
	
	RowHeight=20,
	RowPadding=0,
	NumRows=9,
	
	InfoBoxPos=POS(0,301),
	InfoBoxSize=SIZE(640,88),
	InfoTextPos=POS(320,14),
	InfoTextSize=SIZE(500,47),
	InfoTextFont=fontmedium(),
	InfoTextFontColor=GetPaletteColor(34)
}

local EventListener

local OnGameTypeChanged, OnNumPlayersChanged, OnReservedChanged, OnRatedChanged, UpdateInfoText

local GameModeRace = {
	MULTIPLAYER_GAMEMODE,
	{MULTIPLAYER_GAMEMODE_RACE, MULTIPLAYER_GAMEMODE_PONGRACE, MULTIPLAYER_MIXEDRACES, L"ANY" },
	{ReplicatedSession.GAMETYPE_RACE, ReplicatedSession.GAMETYPE_PONGRACE, ReplicatedSession.GAMETYPE_TOURNAMENT_RACE, -1},
	1,
	true,
	nil,
	{MULTIPLAYER_GAMEMODE_RACE_DESCRIPTION, MULTIPLAYER_GAMEMODE_PONGRACE_DESCRIPTION},
}

local GameModeDerby = {
	MULTIPLAYER_GAMEMODE,
	{MULTIPLAYER_GAMEMODE_WRECKINGDERBY, MULTIPLAYER_GAMEMODE_SURVIVORDERBY, MULTIPLAYER_GAMEMODE_FRAGDERBY, MULTIPLAYER_GAMEMODE_TAG, MULTIPLAYER_MIXEDDERBIES, L"ANY" },
	{ReplicatedSession.GAMETYPE_DERBY_WRECKING, ReplicatedSession.GAMETYPE_DERBY_LMS, ReplicatedSession.GAMETYPE_DERBY_FRAG, ReplicatedSession.GAMETYPE_HUNTER_PREY, ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY, -1},
	1,
	true,
	nil,
	{MULTIPLAYER_GAMEMODE_WRECKINGDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_SURVIVORDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_FRAGDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_TAG_DESCRIPTION }
}

local OptionItems = {
	-- General Options:
	{
		MULTIPLAYER_RANKEDGAME,
		{UI_YES, UI_NO},
		{1, 0},
		2,
		true,
		function() OnRatedChanged() end,
		{MULTIPLAYER_RANKED_YES_DESCRIPTION, MULTIPLAYER_RANKED_NO_DESCRIPTION}
	},
	{
		MULTIPLAYER_GAMETYPE,
		{MULTIPLAYER_GAMETYPE_RACE, MULTIPLAYER_GAMETYPE_STUNT, MULTIPLAYER_GAMETYPE_DERBY, MULTIPLAYER_GAMETYPE_ALL},
		{ReplicatedSession.GAMETYPE_TOURNAMENT_RACE, ReplicatedSession.GAMETYPE_STUNT, ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY, ReplicatedSession.GAMETYPE_TOURNAMENT},
		1,
		true,
		function()OnGameTypeChanged()end,
		{MULTIPLAYER_GAMETYPE_RACE_DESCRIPTION, MULTIPLAYER_GAMETYPE_STUNT_DESCRIPTION, MULTIPLAYER_GAMETYPE_DERBY_DESCRIPTION, MULTIPLAYER_GAMETYPE_ALL_DESCRIPTION }
	},
	{
		MULTIPLAYER_GAMEMODE,
		{L""},
		{0},
		1,
		false,
		nil,
	},
	{
		MULTIPLAYER_CARTYPE,
		{MULTIPLAYER_CARTYPE_ANY, MULTIPLAYER_CARTYPE_STREET, MULTIPLAYER_CARTYPE_RACING, MULTIPLAYER_CARTYPE_DERBY, L"STUNT (NEED ID)"},
		{SessionInfo.CarClass.Any, SessionInfo.CarClass.ClassA, SessionInfo.CarClass.ClassB, SessionInfo.CarClass.ClassC, SessionInfo.CarClass.Stunt},
		1,
		true,
		nil,
		{MULTIPLAYER_CARTYPE_ANY_DESCRIPTION, MULTIPLAYER_CARTYPE_STREET_DESCRIPTION, MULTIPLAYER_CARTYPE_RACING_DESCRIPTION, MULTIPLAYER_CARTYPE_DERBY_DESCRIPTION}
	},
	{
		MULTIPLAYER_NITRO,
		{L"0%", L"50%", L"100%", L"200%", L"ANY"},
		{SessionInfo.NitroRegen.Regen0, SessionInfo.NitroRegen.Regen50, SessionInfo.NitroRegen.Regen100, SessionInfo.NitroRegen.Regen200, -1},
		5,
		true,
		nil,
		{MULTIPLAYER_NITRO_0_DESCRIPTION, MULTIPLAYER_NITRO_50_DESCRIPTION, MULTIPLAYER_NITRO_100_DESCRIPTION, MULTIPLAYER_NITRO_200_DESCRIPTION}
	},
	{
		MULTIPLAYER_PLAYERS,
		{L"2", L"3", L"4", L"5", L"6", L"7", L"8"},
		{2, 3, 4, 5, 6, 7, 8},
		7,
		true,
		nil,
		MULTIPLAYER_PLAYERS_DESCRIPTION
	},
	{
		MULTIPLAYER_LANGUAGE,
		{MULTIPLAYER_LANGUAGE_ANY, MULTIPLAYER_LANGUAGE_ENGLISH, MULTIPLAYER_LANGUAGE_GERMAN, MULTIPLAYER_LANGUAGE_FRENCH, MULTIPLAYER_LANGUAGE_SPANISH, MULTIPLAYER_LANGUAGE_ITALIAN},
		{1, 2, 3, 4, 5, 6},
		1,
		true,
		nil,
		{MULTIPLAYER_LANGUAGE_ANY_DESCRIPTION, MULTIPLAYER_LANGUAGE_ENGLISH_DESCRIPTION, MULTIPLAYER_LANGUAGE_GERMAN_DESCRIPTION, MULTIPLAYER_LANGUAGE_FRENCH_DESCRIPTION, MULTIPLAYER_LANGUAGE_SPANISH_DESCRIPTION, MULTIPLAYER_LANGUAGE_ITALIAN_DESCRIPTION}
	},
}

local NumOptions=7

-- OptionItem item indexes
local Label=1
local ItemLabels=2
local ItemValues=3
local SelectedItem=4
local Enabled=5
local OnChanged=6
local Descriptions=7

-- OptionItem indexes
local RankedGame=1
local GameType=2
local GameMode=3
local CarType=4
local NitroRegen=5
local Players=6
local Language=7
	


local function GetSelectedItem(RowNr)
	return OptionItems[RowNr][SelectedItem]
end

local function SetSelectedItem(RowNr, Item)
	OptionItems[RowNr][SelectedItem]=Item
end

local function GetEnabled(RowNr)
	return OptionItems[RowNr][Enabled]
end

local function SetEnabled(RowNr, Enable)
	OptionItems[RowNr][Enabled]=Enable
end

local function GetItemValue(RowNr, SelectedItem)
	return OptionItems[RowNr][ItemValues][SelectedItem]
end

local function SetItemValue(RowNr, SelectedItem, Value)
	OptionItems[RowNr][ItemValues][SelectedItem]=Value
end

local function GetItemLabel(RowNr, SelectedItem)
	return OptionItems[RowNr][ItemLabels][SelectedItem]
end

local function SetItemLabel(RowNr, SelectedItem, Label)
	OptionItems[RowNr][ItemLabels][SelectedItem]=Label
end

local function GetSelectedItemValue(RowNr)
	return GetItemValue(RowNr, GetSelectedItem(RowNr))
end

local function SetSelectedItemValue(RowNr, Value)
	SetItemValue(RowNr, GetSelectedItem(RowNr), Value)
end

local function GetSelectedItemLabel(RowNr)
	return GetItemLabel(RowNr, GetSelectedItem(RowNr))
end

local function SetSelectedItemLabel(RowNr, Label)
	SetItemLabel(RowNr, GetSelectedItem(RowNr), Label)
end

local function GetNumItems(RowNr)
	return table.getn(OptionItems[RowNr][ItemLabels])
end

local function ClearItemValues(RowNr)
	OptionItems[RowNr][ItemValues]={}
end

local function ClearItemLabels(RowNr)
	OptionItems[RowNr][ItemLabels]={}
end

local function ClearItems(RowNr)
	ClearItemValues(RowNr)
	ClearItemLabels(RowNr)
end

local function StartSearchMatch()
	Network:StartMultiplayer()
	if MultiplayerMode == MPMODE_GAMESPY then
		GameSpy:StopUpdate()
		Network:CreateGameSpySession()
		Network:StartSearchGameSpySessions()
		GameSpy:ResumeUpdate()
	elseif MultiplayerMode == MPMODE_XBOXLIVE then
		if GetSelectedItemValue(RankedGame) == 1 then
			Network:StartSearchXBoxLiveSessions("OPTIMATCHRATED")
		else
			Network:StartSearchXBoxLiveSessions("OPTIMATCHNONRATED")
		end
	end

	local gameType = GetSelectedItemValue(GameType)
	local gameMode = GetSelectedItemValue(GameMode)
--	local eventType = GetSelectedItemValue(EventType)

	SessionList:SetParameter("GameType", gameType)
	if gameMode ~= -1 then
		SessionList:SetParameter("GameMode", gameMode)
	end
	
	local language = GetSelectedItemValue(Language)
	SessionList:SetParameter("Language", language)
	
	local carType = GetSelectedItemValue(CarType)
	if carType ~= -1 then
		SessionList:SetParameter("CarType", carType)
	end	
	
	local nitroRegen = GetSelectedItemValue(NitroRegen)
	if nitroRegen ~= -1 then 
		SessionList:SetParameter("NitroRegeneration", nitroRegen)
	end
end

OnRatedChanged = function()
	if GetSelectedItemValue(RankedGame) == 0 then
		SetEnabled(GameType, false)
		SetSelectedItem(GameType, 4)
		SetEnabled(GameMode, false)
	else
		SetEnabled(GameType, true)
		SetSelectedItem(GameType, 1)
		OnGameTypeChanged()
	end
end

OnGameTypeChanged = function()
	local gameType = GetSelectedItemValue(GameType)
	if gameType == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE then
		OptionItems[GameMode] = GameModeRace
		SetEnabled(GameMode, true)
	elseif gameType == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY then
		OptionItems[GameMode] = GameModeDerby
		SetEnabled(GameMode, true)
	else
		SetEnabled(GameMode, false)
	end
end

local function UpdateArrows(self)
	local leftarrow_glow = wm.GetWindow("leftarrow_glow")
	local rightarrow_glow = wm.GetWindow("rightarrow_glow")
	local leftarrow = wm.GetWindow("leftarrow")
	local rightarrow = wm.GetWindow("rightarrow")
	
	local row = wm.GetWindow("optionlist"):GetSelectedRow()
	local y = Layout.ListTop + Layout.RowHeight * (row - 1)
	
	local leftArrowSize = wm.GetResourceSize(self:getResource("scroll_left_icon"))
	local rightArrowSize = wm.GetResourceSize(self:getResource("scroll_right_icon"))
	local leftGlowArrowSize = wm.GetResourceSize(self:getResource("scroll_left_glow"))
	local rightGlowArrowSize = wm.GetResourceSize(self:getResource("scroll_right_glow"))

	local xpos = Layout.OptionLeft + 6 * (row - 1) + Layout.OptionArrowIndentLeftRight
	leftarrow_glow:SetPosition(xpos, y + 1)
	leftarrow:SetPosition(xpos + (leftGlowArrowSize[1] - leftArrowSize[1]) / 2, y + 2 + (leftGlowArrowSize[2] - leftArrowSize[2]) / 2)
	
	local value = wm.GetWindow("optionvalue_row"..row)
	local xpos,_ = wm.GetTextExtents(value:GetTitle(), Layout.ListFont)
	xpos = Layout.OptionLeft + xpos + leftGlowArrowSize[1] + 2 * Layout.OptionArrowIndentLeftRight + 6 * (row - 1)

	rightarrow_glow:SetPosition(xpos, y + 1)
	rightarrow:SetPosition(xpos + (rightGlowArrowSize[1] - rightArrowSize[1]) / 2, y + 2 + (rightGlowArrowSize[2] - rightArrowSize[2]) / 2)
end

UpdateInfoText = function()
	local selectedRow = wm.GetWindow("optionlist"):GetSelectedRow()
	local descs = OptionItems[selectedRow][Descriptions]
	if descs ~= nil then
		local desc
		if type(descs) == "table" then
			desc = descs[GetSelectedItem(selectedRow)]
		else
			desc = descs
		end
		
		if desc then
			wm.GetWindow("infotext"):SetTitle(desc)
			wm.GetWindow("infotext"):WordWrap()
		else
			wm.GetWindow("infotext"):SetTitle(L"")
		end
	end
end

menu_multiplayer_optimatch = CreateMenuFromTemplate("template_multiplayer")
if XBOX then
	menu_multiplayer_optimatch.options.title = TITLE_LIVE_OPTIMATCH
else
	menu_multiplayer_optimatch.options.title = TITLE_GAMESPY_FINDGAMES
end

menu_multiplayer_optimatch.back = function() EnterMenu(menu_multiplayer_optimatch.backmenu) end

function menu_multiplayer_optimatch.create(self)
	self.parent:create(self)

	self:addResource("backdrops3.tga", backdrops3, backdrops3_size)
	self:loadResources()

	self.items = { }
end

function menu_multiplayer_optimatch.init(self)
	self.parent:init(self)
	
	GUI:SetBackground("data/menu/menu_background.tga")
	
	Creating=false
	
	local angsize = wm.GetResourceSize(self:getResource("options_6_slices_l_ang"))
	Frame { Position=POS(302,116), Size=angsize, Layer=3 }:AttachResource(self:getResource("options_6_slices_l_ang"))
	angsize = wm.GetResourceSize(self:getResource("options_6_slices_r_ang"))
	Frame { Position=POS(312,116), Size=angsize, Layer=3 }:AttachResource(self:getResource("options_6_slices_r_ang"))
	
	angsize = wm.GetResourceSize(self:getResource("options_1_slice_l_ang"))
	Frame { Position=POS(338,236), Size=angsize, Layer=3 }:AttachResource(self:getResource("options_1_slice_l_ang"))
	angsize = wm.GetResourceSize(self:getResource("options_1_slice_r_ang"))
	Frame { Position=POS(347,236), Size=angsize, Layer=3 }:AttachResource(self:getResource("options_1_slice_r_ang"))
	
	Frame { Position=POS(0,116), Size=SIZE(302,118), Layer=3 }:AttachResource(self:getResource("options_6_strech"))
	Frame { Position=POS(352,116), Size=SIZE(302,118), Layer=3 }:AttachResource(self:getResource("options_6_strech"))

	Frame { Position=POS(0,236), Size=SIZE(337,18), Layer=3 }:AttachResource(wm.GetResource("wide_black_bar_50"))
	Frame { Position=POS(358,236), Size=SIZE(282,18), Layer=3 }:AttachResource(wm.GetResource("wide_black_bar_50"))

	local listboxParams = {
		ListBoxTemplate	= { Name="optionlist" },
		Left			= Layout.ListLeft,
		Top				= Layout.ListTop,
		LeftPadding		= 0,
		RightPadding	= 0,
		TopPadding		= 0,
		BottomPadding	= 0,
		RowWidth		= 640,
		RowHeight		= Layout.RowHeight,
		RowPadding		= Layout.RowPadding,
		RowTemplate		= { DrawBackgroundColor=FALSE, TitleCentering=TITLE_CENTER_Y },
		RowTemplateType	= "Button",
		RowTemplateCust	= function(Row, RowNr)
		end,
		NumRows	= NumOptions,
		Coloumns = {
			[1] = {
				Name				= "optiontitle", -- _row# is added
				ColoumnTemplate		= { Font=Layout.ListFont, Color=Layout.LabelFontColor, Position=POS(Layout.LabelLeft, -2), Size=SIZE(Layout.OptionWidth, Layout.RowHeight), Align=FONTF_RIGHT, Layer=4 },
				ColoumnTemplateType	= "StaticText",
				ColoumnTemplateCust	= function(Coloumn, RowNr, ColoumnNr)
				end
			},
			[2] = {
				Name				= "optionvalue", -- _row# is added
				ColoumnTemplate		= { Font=Layout.ListFont, Color=Layout.OptionFontColor, Position=POS(Layout.OptionLeft, -2), Size=SIZE(Layout.OptionWidth, Layout.RowHeight), Layer=4 },
				ColoumnTemplateType	= "StaticText",
				ColoumnTemplateCust	= function(Coloumn, RowNr, ColoumnNr)
				end
			},
		}
	}
	
	local optionlist = CreateMultiColoumnListBox(listboxParams)
	optionlist:SetNumRows(NumOptions)
	optionlist:SetSelectedRow(1)
	optionlist.onNeedData = function(Self, RowObject, RowNr, ControlRowNr)
		local title = wm.GetWindow("optiontitle_row"..RowNr)
		local value = wm.GetWindow("optionvalue_row"..RowNr)
		
		local arrowSize = GetResourceSize(self:getResource("scroll_left_glow"))
		title:SetPosition(Layout.LabelLeft + 6 * (RowNr - 1), 0)
		value:SetPosition(Layout.OptionLeft + 6 * (RowNr - 1) + Layout.OptionArrowIndentLeftRight + arrowSize[1], 0)
		
		title:SetTitle(OptionItems[RowNr][Label])
		if OptionItems[RowNr][Enabled] then
			value:SetLayer(4)
			title:SetLayer(4)
			value:SetTitle(GetSelectedItemLabel(RowNr))
		else
			value:SetLayer(2)
			title:SetLayer(2)
			if RowNr == GameType then
				value:SetTitle(MULTIPLAYER_GAMETYPE_MIXED)
			else
				value:SetTitle(L"")
			end
		end

		UpdateArrows(self)
	end

	local arrowSize = GetResourceSize(self:getResource("scroll_left_glow"))
	Frame { Name="leftarrow_glow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("scroll_left_glow"))
	arrowSize = GetResourceSize(self:getResource("scroll_left_icon"))
	Frame { Name="leftarrow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("scroll_left_icon"))
	
	arrowSize = GetResourceSize(self:getResource("scroll_right_glow"))
	Frame { Name="rightarrow_glow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("scroll_right_glow"))
	arrowSize = GetResourceSize(self:getResource("scroll_right_icon"))
	Frame { Name="rightarrow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("scroll_right_icon"))
	
	local infobox = Frame { Position=Layout.InfoBoxPos, Size=Layout.InfoBoxSize }
	infobox:AttachResource(self:getResource("options_description_bd"))
	StaticText { Name="infotext", Position=Layout.InfoTextPos, Size=Layout.InfoTextSize, Font=Layout.InfoTextFont, Color=Layout.InfoTextFontColor, Parent=infobox, Align=FONTF_CENTER, TitleCentering=TITLE_CENTER_Y }

	local handler = InputHandler { Name="inputhandler" }
	handler.onKeyPressed = function(Self, Character, VirtualKey, ScanCode)
		local labels
				
		local selectedRow = optionlist:GetSelectedRow()
		if VirtualKey == KeyCodes["BUTTON_START"] then
			StartSearchMatch()
			EnterMenu("menu_multiplayer_optimatchresults")
		elseif VirtualKey == KeyCodes["BUTTON_SELECT"] then
			menu_multiplayer_optimatch.back()
		elseif VirtualKey == KeyCodes["BUTTON_LEFT"] then
			if GetEnabled(selectedRow) then
				local selectedItem = GetSelectedItem(selectedRow) - 1
				local numItems = GetNumItems(selectedRow)
				if selectedItem < 1 then
					selectedItem = numItems
				end
				SetSelectedItem(selectedRow,selectedItem)

				local onChanged = OptionItems[selectedRow][OnChanged]
				if onChanged ~= nil then
					onChanged(selectedRow)
				end
				
				optionlist:Refresh()
				UpdateInfoText()
			end
		elseif VirtualKey == KeyCodes["BUTTON_RIGHT"] then
			if GetEnabled(selectedRow) then
				local selectedItem = GetSelectedItem(selectedRow) + 1
				local numItems = GetNumItems(selectedRow)
				if selectedItem > numItems then
					selectedItem = 1
				end
				SetSelectedItem(selectedRow,selectedItem)

				local onChanged = OptionItems[selectedRow][OnChanged]
				if onChanged ~= nil then
					onChanged(selectedRow)
				end
				
				optionlist:Refresh()
				UpdateInfoText()
			end
		elseif VirtualKey == KeyCodes["BUTTON_DOWN"] then
			-- Skip any disabled rows
			local prevsel = optionlist:GetSelectedRow()
			repeat
				optionlist:MoveNext()
			until OptionItems[optionlist:GetSelectedRow()][Enabled] == true or optionlist:GetSelectedRow() == table.getn(OptionItems)
			if optionlist:GetSelectedRow() == table.getn(OptionItems) and OptionItems[optionlist:GetSelectedRow()][Enabled] == false then
				optionlist:SetSelectedRow(prevsel)
			end
			
			UpdateArrows(self)
			UpdateInfoText()
		elseif VirtualKey == KeyCodes["BUTTON_UP"] then
			-- Skip any disabled rows
			local prevsel = optionlist:GetSelectedRow()
			repeat
				optionlist:MovePrev()
			until OptionItems[optionlist:GetSelectedRow()][Enabled] == true or optionlist:GetSelectedRow() == 1
			if optionlist:GetSelectedRow() == 1 and OptionItems[optionlist:GetSelectedRow()][Enabled] == false then
				optionlist:SetSelectedRow(prevsel)
			end
			
			UpdateArrows(self)
			UpdateInfoText()
		end
	end
	
	if MultiplayerMode == MPMODE_LAN then
		OptionItems[RankedGame][Enabled] = false
		SetSelectedItem(RankedGame, 2)
		OnRatedChanged()
		optionlist:SetSelectedRow(4)
	else
		OptionItems[RankedGame][Enabled] = true
		SetSelectedItem(RankedGame, 2)
		OnRatedChanged()
	end

	GUI:SetHelpButtons(BUTTON_OK, UI_FINDGAMES, BUTTON_BACK, UI_BACK)
	UpdateInfoText()
	
	handler:SetFocus()
end
	
function menu_multiplayer_optimatch.deinit(self)
	self.parent:deinit(self)
end
	
function menu_multiplayer_optimatch.update(self, time)
	self.parent:update(self, time)
	
	local alpha = 1 - 0.20 + math.sin(time * 6) * 0.20
	wm.GetWindow("leftarrow_glow"):SetAlpha(alpha)
	wm.GetWindow("rightarrow_glow"):SetAlpha(alpha)
end
