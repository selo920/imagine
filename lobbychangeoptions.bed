--///////////////////////////////////////////////////////////////////////////
--// LobbyChangeOptions.bed
--///////////////////////////////////////////////////////////////////////////
--// Copyright (c) 2005 Bugbear Entertainment ltd. 
--// All Rights Reserved.
--// 
--// Created on 13.9.2005 10:33
--// 
--// Authors: Pasi Matilainen (pasi.matilainen@bugbear.fi)
--///////////////////////////////////////////////////////////////////////////

dofile("data/menu/backdrops3.bed")
--dofile("data/menu/selection_elements.bed")

menu_multiplayer_lobby_changeoptions = CreateMenuFromTemplate("template_multiplayer")
menu_multiplayer_lobby_changeoptions.options.title = TITLE_MULTIPLAYER_CHANGEOPTIONS
menu_multiplayer_lobby_changeoptions.back = function() end


function EnterChangeOptions(title, backmenu)
	menu_multiplayer_lobby_changeoptions.options.title = title
	menu_multiplayer_lobby_changeoptions.back = entermenu(backmenu)
	EnterMenu("menu_multiplayer_lobby_changeoptions")
end

function menu_multiplayer_lobby_changeoptions.create(self)
	self.parent:create(self)

--	self:addResource("selection_elements.tga",selection_elements,selection_elements_size)
	self:addResource("backdrops3.tga", backdrops3, backdrops3_size)

	self:loadResources()

	self.items = { }
end

local Layout=
{
	ListLeft=0,
	ListTop=76,
	ListFont=fontmedium(),
	
	LabelLeft=287,
	LabelFontColor=GetPaletteColor(33),
	
	OptionLeft=303,
	OptionWidth=337,
	OptionFontColor=GetPaletteColor(34),
	OptionDisabledFontColor=GetPaletteColor(2),
	OptionArrowIndentTop=4,
	OptionArrowIndentLeftRight=5,
	
	RowHeight=20,
	RowPadding=0,
	NumRows=9,
	
	InfoBoxPos=POS(0,301),
	InfoBoxSize=SIZE(640,88),
	InfoTextPos=POS(320,14),
	InfoTextSize=SIZE(500,47),
	InfoTextFont=fontmedium(),
	InfoTextFontColor=GetPaletteColor(34)
}

local GameTypes = {
	[ReplicatedSession.GAMETYPE_RACE] = 1,
	[ReplicatedSession.GAMETYPE_PONGRACE] = 1,
	[ReplicatedSession.GAMETYPE_TOURNAMENT_RACE] = 1,
	[ReplicatedSession.GAMETYPE_STUNT] = 2,
	[ReplicatedSession.GAMETYPE_DERBY_WRECKING] = 3,
	[ReplicatedSession.GAMETYPE_DERBY_LMS] = 3,
	[ReplicatedSession.GAMETYPE_DERBY_FRAG] = 3,
	[ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY] = 3,	
	[ReplicatedSession.GAMETYPE_HUNTER_PREY] = 3,
	[ReplicatedSession.GAMETYPE_TOURNAMENT] = 4,
}

local OnGameTypeChanged, OnNumPlayersChanged, OnReservedChanged, OnRatedChanged

local GameModeRace = {
	MULTIPLAYER_GAMEMODE,
	{MULTIPLAYER_GAMEMODE_RACE, MULTIPLAYER_GAMEMODE_PONGRACE, MULTIPLAYER_MIXEDRACES},
	{ReplicatedSession.GAMETYPE_RACE, ReplicatedSession.GAMETYPE_PONGRACE, ReplicatedSession.GAMETYPE_TOURNAMENT_RACE},
	1,
	true,
	nil,
	{MULTIPLAYER_GAMEMODE_RACE_DESCRIPTION, MULTIPLAYER_GAMEMODE_PONGRACE_DESCRIPTION},
}

local GameModeDerby = {
	MULTIPLAYER_GAMEMODE,
	{MULTIPLAYER_GAMEMODE_WRECKINGDERBY, MULTIPLAYER_GAMEMODE_SURVIVORDERBY, MULTIPLAYER_GAMEMODE_FRAGDERBY, MULTIPLAYER_GAMEMODE_TAG, MULTIPLAYER_MIXEDDERBIES},
	{ReplicatedSession.GAMETYPE_DERBY_WRECKING, ReplicatedSession.GAMETYPE_DERBY_LMS, ReplicatedSession.GAMETYPE_DERBY_FRAG, ReplicatedSession.GAMETYPE_HUNTER_PREY, ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY},
	1,
	true,
	nil,
	{MULTIPLAYER_GAMEMODE_WRECKINGDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_SURVIVORDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_FRAGDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_TAG_DESCRIPTION }
}

local GameModeEmpty = {
	MULTIPLAYER_GAMEMODE,
	{L""},
	{0},
	1,
	false,
}

local OptionItems = {
	{
		MULTIPLAYER_RANKEDGAME,
		{UI_YES, UI_NO},
		{1, 0},
		2,
		true,
		function()OnRatedChanged()end,
		{MULTIPLAYER_RANKED_YES_DESCRIPTION, MULTIPLAYER_RANKED_NO_DESCRIPTION}
	},
	{
		MULTIPLAYER_GAMETYPE,
		{MULTIPLAYER_GAMETYPE_RACE, MULTIPLAYER_GAMETYPE_STUNT, MULTIPLAYER_GAMETYPE_DERBY, MULTIPLAYER_GAMETYPE_MIXED },
		{1, 2, 3, 4},
		1,
		false,
		function()OnGameTypeChanged()end,
		{MULTIPLAYER_GAMETYPE_RACE_DESCRIPTION, MULTIPLAYER_GAMETYPE_STUNT_DESCRIPTION, MULTIPLAYER_GAMETYPE_DERBY_DESCRIPTION }
	},
	{
		MULTIPLAYER_GAMEMODE,
		{L""},
		{0},
		1,
		false,
		nil,
	},
	{
		MULTIPLAYER_CARTYPE,
		{MULTIPLAYER_CARTYPE_ANY, MULTIPLAYER_CARTYPE_DERBY, MULTIPLAYER_CARTYPE_RACING, MULTIPLAYER_CARTYPE_STREET, L"STUNT (NEED ID)"},
		{SessionInfo.CarClass.Any, SessionInfo.CarClass.ClassA, SessionInfo.CarClass.ClassB, SessionInfo.CarClass.ClassC, SessionInfo.CarClass.Stunt},
		1,
		true,
		nil,
		{MULTIPLAYER_CARTYPE_ANY_DESCRIPTION, MULTIPLAYER_CARTYPE_STREET_DESCRIPTION, MULTIPLAYER_CARTYPE_RACING_DESCRIPTION, MULTIPLAYER_CARTYPE_DERBY_DESCRIPTION}
	},
	{
		MULTIPLAYER_UPGRADES,
		{L"0%", L"50%", L"100%", MULTIPLAYER_UPGRADES_CHOICE},
		{SessionInfo.CarUpgrades.None, SessionInfo.CarUpgrades.Half, SessionInfo.CarUpgrades.All, SessionInfo.CarUpgrades.Any},
		3,
		true,
		nil,
		{MULTIPLAYER_UPGRADES_0_DESCRIPTION, MULTIPLAYER_UPGRADES_50_DESCRIPTION, MULTIPLAYER_UPGRADES_100_DESCRIPTION, MULTIPLAYER_UPGRADES_ANY_DESCRIPTION}
	},
	{
		MULTIPLAYER_NITRO,
		{L"0%", L"50%", L"100%", L"200%"},
		{SessionInfo.NitroRegen.Regen0, SessionInfo.NitroRegen.Regen50, SessionInfo.NitroRegen.Regen100, SessionInfo.NitroRegen.Regen200},
		3,
		true,
		nil,
		{MULTIPLAYER_NITRO_0_DESCRIPTION, MULTIPLAYER_NITRO_50_DESCRIPTION, MULTIPLAYER_NITRO_100_DESCRIPTION, MULTIPLAYER_NITRO_200_DESCRIPTION}
	},
	{
		MULTIPLAYER_PLAYERS,
		{L"2", L"3", L"4", L"5", L"6", L"7", L"8"},
		{2, 3, 4, 5, 6, 7, 8},
		7,
		true,
		function()OnNumPlayersChanged()end,
		MULTIPLAYER_PLAYERS_DESCRIPTION
	},
	{
		MULTIPLAYER_RESERVED,
		{L"0", L"1", L"2", L"3", L"4", L"5", L"6", L"7"},
		{0, 1, 2, 3, 4, 5, 6, 7, 8, -1},
		1,
		true,
		function()OnReservedChanged()end,
		MULTIPLAYER_RESERVEDFORFRIENDS_DESCRIPTION
	},
	{
		MULTIPLAYER_LANGUAGE,
		{MULTIPLAYER_LANGUAGE_ANY, MULTIPLAYER_LANGUAGE_ENGLISH, MULTIPLAYER_LANGUAGE_GERMAN, MULTIPLAYER_LANGUAGE_FRENCH, MULTIPLAYER_LANGUAGE_SPANISH, MULTIPLAYER_LANGUAGE_ITALIAN},
		{1, 2, 3, 4, 5, 6},
		1,
		true,
		nil,
		{MULTIPLAYER_LANGUAGE_ANY_DESCRIPTION, MULTIPLAYER_LANGUAGE_ENGLISH_DESCRIPTION, MULTIPLAYER_LANGUAGE_GERMAN_DESCRIPTION, MULTIPLAYER_LANGUAGE_FRENCH_DESCRIPTION, MULTIPLAYER_LANGUAGE_SPANISH_DESCRIPTION, MULTIPLAYER_LANGUAGE_ITALIAN_DESCRIPTION}
	},
	{
		L"DAMAGE LEVEL",
		{L"0%", L"50%", L"100%", L"150%", L"200%"},
		{ReplicatedSession.DAMAGELEVEL_0, ReplicatedSession.DAMAGELEVEL_50, ReplicatedSession.DAMAGELEVEL_100, ReplicatedSession.DAMAGELEVEL_150, ReplicatedSession.DAMAGELEVEL_200},
		3,
		true,
		nil,
		L"Damage level in races and pong races"
	},
	{
		L"DERBY DAMAGE LEVEL",
		{L"50%", L"100%", L"150%", L"200%"},
		{ReplicatedSession.DERBYDAMAGELEVEL_50, ReplicatedSession.DERBYDAMAGELEVEL_100, ReplicatedSession.DERBYDAMAGELEVEL_150, ReplicatedSession.DERBYDAMAGELEVEL_200},
		2,
		true,
		nil,
		L"Damage level in derbies"
	}
}

local NumOptions=11

-- OptionItem item indexes
local Label=1
local ItemLabels=2
local ItemValues=3
local SelectedItem=4
local Enabled=5
local OnChanged=6
local Descriptions=7

-- OptionItem indexes
local RankedGame=1
local GameType=2
local GameMode=3
local CarType=4
local Upgrades=5
local NitroRegen=6
local Players=7
local Reserved=8
local Language=9
local DamageLevel=10
local DerbyDamageLevel=11

local function GetEnabled(RowNr)
	return OptionItems[RowNr][Enabled]
end

local function SetEnabled(RowNr, Enable)
	OptionItems[RowNr][Enabled]=Enable
end

local function GetSelectedItem(RowNr)
	return OptionItems[RowNr][SelectedItem]
end

local function SetSelectedItem(RowNr, Item)
	OptionItems[RowNr][SelectedItem]=Item
end

local function GetSelectedItemValue(rowNr)
	return OptionItems[rowNr][ItemValues][OptionItems[rowNr][SelectedItem] ]
end

local function GetSelectedItemLabel(rowNr)
	return OptionItems[rowNr][ItemLabels][OptionItems[rowNr][SelectedItem] ]
end

local function GetNumItems(RowNr)
	return table.getn(OptionItems[RowNr][ItemValues])
end

local function UpdateArrows(self)
	local leftarrow_glow = wm.GetWindow("leftarrow_glow")
	local rightarrow_glow = wm.GetWindow("rightarrow_glow")
	local leftarrow = wm.GetWindow("leftarrow")
	local rightarrow = wm.GetWindow("rightarrow")
	
	local row = wm.GetWindow("optionlist"):GetSelectedRow()
	local y = 76 + 20 * (row - 1)
	
	local leftArrowSize = wm.GetResourceSize(self:getResource("scroll_left_icon"))
	local rightArrowSize = wm.GetResourceSize(self:getResource("scroll_right_icon"))
	local leftGlowArrowSize = wm.GetResourceSize(self:getResource("scroll_left_glow"))
	local rightGlowArrowSize = wm.GetResourceSize(self:getResource("scroll_right_glow"))

	local xpos = Layout.OptionLeft + 6 * (row - 1) + Layout.OptionArrowIndentLeftRight
	leftarrow_glow:SetPosition(xpos, y + 1)
	leftarrow:SetPosition(xpos + (leftGlowArrowSize[1] - leftArrowSize[1]) / 2, y + 2 + (leftGlowArrowSize[2] - leftArrowSize[2]) / 2)
	
	local value = wm.GetWindow("optionvalue_row"..row)
	local xpos,_ = wm.GetTextExtents(value:GetTitle(), Layout.ListFont)
	xpos = Layout.OptionLeft + xpos + leftGlowArrowSize[1] + 2 * Layout.OptionArrowIndentLeftRight + 6 * (row - 1)

	rightarrow_glow:SetPosition(xpos, y + 1)
	rightarrow:SetPosition(xpos + (rightGlowArrowSize[1] - rightArrowSize[1]) / 2, y + 2 + (rightGlowArrowSize[2] - rightArrowSize[2]) / 2)
end

local function UpdateInfoText()
	local selectedRow = wm.GetWindow("optionlist"):GetSelectedRow()
	local descs = OptionItems[selectedRow][Descriptions]
		
	if descs ~= nil then
		local desc
		if type(descs) == "table" then
			desc = descs[GetSelectedItem(selectedRow)]
		else
			desc = descs
		end
		
		if desc then
			wm.GetWindow("infotext"):SetTitle(desc)
			wm.GetWindow("infotext"):WordWrap()
		else
			wm.GetWindow("infotext"):SetTitle(L"")
		end
	end
end

OnNumPlayersChanged = function()
	local numPlayers = GetSelectedItem(Players)
	if GetSelectedItemValue(Reserved) > GetSelectedItemValue(Players) - 1 then
		-- Players is 2-8, Reserved is 0-7, Reserved must be lower than Players
		SetSelectedItem(Reserved, GetSelectedItem(Players) + 1)
	end
end

OnReservedChanged = function()
	-- There be kludges here
	if GetSelectedItemValue(Reserved) == -1 then
		SetSelectedItem(Reserved, GetSelectedItem(Players) + 1)
	elseif GetSelectedItemValue(Reserved) > GetSelectedItemValue(Players) - 1 then
		SetSelectedItem(Reserved, 1)
	end
end

OnRatedChanged = function()
	if GetSelectedItemValue(RankedGame) == 0 then
		SetEnabled(GameType, false)
		SetEnabled(GameMode, false)
		SetEnabled(DamageLevel, true)
		SetEnabled(DerbyDamageLevel, true)
		SetEnabled(Reserved, true)
	else
		SetEnabled(GameType, true)
		SetEnabled(Reserved, false)
		OnGameTypeChanged()
	end
end

OnGameTypeChanged = function()
	local gameType = GetSelectedItemValue(GameType)
	if gameType == 1 then
		OptionItems[GameMode] = GameModeRace
		SetEnabled(GameMode, true)
		SetEnabled(DamageLevel, true)
		SetEnabled(DerbyDamageLevel, false)
	elseif gameType == 3 then
		OptionItems[GameMode] = GameModeDerby
		SetEnabled(GameMode, true)
		SetEnabled(DamageLevel, false)
		SetEnabled(DerbyDamageLevel, true)
	else
		SetEnabled(GameMode, false)
		SetEnabled(DamageLevel, false)
		SetEnabled(DerbyDamageLevel, false)
	end
end

function menu_multiplayer_lobby_changeoptions.init(self)
	self.parent:init(self)
	
	GUI:SetBackground("data/menu/menu_background.tga")

	for i = 0, Garage:GetNumCars() - 1 do
		local car = db.FlatOut2.Cars:GetProperty("Car", i)
		table.insert(OptionItems[CarType][ItemLabels], L(car.Name))
		table.insert(OptionItems[CarType][ItemValues], 5 + i)
	end
	
	local angsize = wm.GetResourceSize(self:getResource("options_6_slices_l_ang"))
	Frame { Position=POS(292,76), Size=angsize, Layer=3 }:AttachResource(self:getResource("options_6_slices_l_ang"))
	angsize = wm.GetResourceSize(self:getResource("options_6_slices_r_ang"))
	Frame { Position=POS(302,76), Size=angsize, Layer=3 }:AttachResource(self:getResource("options_6_slices_r_ang"))
	
	angsize = wm.GetResourceSize(self:getResource("options_5_slices_l_ang"))
	Frame { Position=POS(327,196), Size=angsize, Layer=3 }:AttachResource(self:getResource("options_5_slices_l_ang"))
	angsize = wm.GetResourceSize(self:getResource("options_5_slices_r_ang"))
	Frame { Position=POS(337,196), Size=angsize, Layer=3 }:AttachResource(self:getResource("options_5_slices_r_ang"))
	
	Frame { Position=POS(0,76), Size=SIZE(292,118), Layer=3 }:AttachResource(self:getResource("options_6_strech"))
	Frame { Position=POS(342,76), Size=SIZE(292,118), Layer=3 }:AttachResource(self:getResource("options_6_strech"))

	Frame { Position=POS(0,196), Size=SIZE(327,98), Layer=3 }:AttachResource(self:getResource("options_5_strech"))
	Frame { Position=POS(378,196), Size=SIZE(262,98), Layer=3 }:AttachResource(self:getResource("options_5_strech"))

	local listboxParams = {
		ListBoxTemplate	= { Name="optionlist" },
		Left			= Layout.ListLeft,
		Top				= Layout.ListTop,
		LeftPadding		= 0,
		RightPadding	= 0,
		TopPadding		= 0,
		BottomPadding	= 0,
		RowWidth		= 640,
		RowHeight		= Layout.RowHeight,
		RowPadding		= Layout.RowPadding,
		RowTemplate		= { DrawBackgroundColor=FALSE, TitleCentering=TITLE_CENTER_Y },
		RowTemplateType	= "Button",
		RowTemplateCust	= function(Row, RowNr)
		end,
		NumRows	= NumOptions,
		Coloumns = {
			[1] = {
				Name				= "optiontitle", -- _row# is added
				ColoumnTemplate		= { Font=Layout.ListFont, Color=Layout.LabelFontColor, Position=POS(Layout.LabelLeft, -2), Size=SIZE(Layout.OptionWidth, Layout.RowHeight), Align=FONTF_RIGHT, Layer=4 },
				ColoumnTemplateType	= "StaticText",
				ColoumnTemplateCust	= function(Coloumn, RowNr, ColoumnNr)
				end
			},
			[2] = {
				Name				= "optionvalue", -- _row# is added
				ColoumnTemplate		= { Font=Layout.ListFont, Color=Layout.OptionFontColor, Position=POS(Layout.OptionLeft, -2), Size=SIZE(Layout.OptionWidth, Layout.RowHeight), Layer=4 },
				ColoumnTemplateType	= "StaticText",
				ColoumnTemplateCust	= function(Coloumn, RowNr, ColoumnNr)
				end
			},
		}
	}
	
	local optionlist = CreateMultiColoumnListBox(listboxParams)
	optionlist:SetNumRows(NumOptions)
	optionlist:SetSelectedRow(1)
	optionlist.onNeedData = function(Self, RowObject, RowNr, ControlRowNr)
		local title = wm.GetWindow("optiontitle_row"..RowNr)
		local value = wm.GetWindow("optionvalue_row"..RowNr)
		
		local arrowSize = GetResourceSize(self:getResource("scroll_left_glow"))
		title:SetPosition(Layout.LabelLeft + 6 * (RowNr - 1), 0)
		value:SetPosition(Layout.OptionLeft + 6 * (RowNr - 1) + Layout.OptionArrowIndentLeftRight + arrowSize[1], 0)
		
		title:SetTitle(OptionItems[RowNr][Label])
		if OptionItems[RowNr][Enabled] then
			value:SetLayer(4)
			title:SetLayer(4)
			value:SetTitle(GetSelectedItemLabel(RowNr))
		else
			value:SetLayer(2)
			title:SetLayer(2)
			if RowNr == Reserved or RowNr == DamageLevel or RowNr == DerbyDamageLevel then
				value:SetTitle(L"")
			else
				value:SetTitle(GetSelectedItemLabel(RowNr))
			end
		end

		UpdateArrows(self)
	end

	local arrowSize = GetResourceSize(self:getResource("scroll_left_glow"))
	Frame { Name="leftarrow_glow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("scroll_left_glow"))
	arrowSize = GetResourceSize(self:getResource("scroll_left_icon"))
	Frame { Name="leftarrow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("scroll_left_icon"))
	
	arrowSize = GetResourceSize(self:getResource("scroll_right_glow"))
	Frame { Name="rightarrow_glow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("scroll_right_glow"))
	arrowSize = GetResourceSize(self:getResource("scroll_right_icon"))
	Frame { Name="rightarrow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("scroll_right_icon"))
	
	local infobox = Frame { Position=Layout.InfoBoxPos, Size=Layout.InfoBoxSize }
	infobox:AttachResource(self:getResource("options_description_bd"))
	StaticText { Name="infotext", Position=Layout.InfoTextPos, Size=Layout.InfoTextSize, Font=Layout.InfoTextFont, Color=Layout.InfoTextFontColor, Parent=infobox, Align=FONTF_CENTER, TitleCentering=TITLE_CENTER_Y }
	
	local info = Session:GetInfo()
	
	local gameMode = info.TournamentType
	local gameType = GameTypes[gameMode]
	SetSelectedItem(GameType, gameType)
	if gameType == 1 then
		OptionItems[GameMode] = GameModeRace
	elseif gameType == 3 then
		OptionItems[GameMode] = GameModeDerby
	elseif gameType == 2 or gameType == 4 then
		OptionItems[GameMode] = GameModeEmpty
	end

	if gameType == 1 then
		SetEnabled(DerbyDamageLevel, false)
	elseif gameType == 2 then
		SetEnabled(DerbyDamageLevel, false)
		SetEnabled(DamageLevel, false)
	elseif gameType == 3 then
		SetEnabled(DamageLevel, false)
	end
	
	if gameType == 1 or gameType == 3 then		
		for i = 1, table.getn(OptionItems[GameMode][ItemValues]) do
			if OptionItems[GameMode][ItemValues][i] == gameMode then
				SetSelectedItem(GameMode, i)
				break
			end
		end
	end
	
	SetEnabled(GameMode, false)
	SetEnabled(GameType, false)
	SetEnabled(RankedGame, false)
	
	SetSelectedItem(RankedGame, info.RatedGame and 1 or 2)
	if info.CarClass < 5 then
		for i = 1, table.getn(OptionItems[CarType][ItemValues]) do
			if OptionItems[CarType][ItemValues][i] == info.CarClass then
				SetSelectedItem(CarType, i)
				break
			end
		end
	else
		SetSelectedItem(CarType, info.CarClass)
	end
	
	for i = 1, table.getn(OptionItems[Upgrades][ItemValues]) do
		if OptionItems[Upgrades][ItemValues][i] == info.CarUpgrades then
			SetSelectedItem(Upgrades, i)
			break
		end
	end
	
	for i = 1, table.getn(OptionItems[NitroRegen][ItemValues]) do
		if OptionItems[NitroRegen][ItemValues][i] == info.NitroRegen then
			SetSelectedItem(NitroRegen, i)
			break
		end
	end

	for i = 1, table.getn(OptionItems[DamageLevel][ItemValues]) do
		if OptionItems[DamageLevel][ItemValues][i] == info.DamageLevel then
			SetSelectedItem(DamageLevel, i)
			break
		end
	end

	for i = 1, table.getn(OptionItems[DerbyDamageLevel][ItemValues]) do
		if OptionItems[DerbyDamageLevel][ItemValues][i] == info.DerbyDamageLevel then
			SetSelectedItem(DerbyDamageLevel, i)
			break
		end
	end

	SetSelectedItem(Players, info.MaxPublicSlots + info.MaxPrivateSlots - 1)
	SetSelectedItem(Reserved, info.MaxPrivateSlots + 1)
	SetSelectedItem(Language, info.Language)
	
	optionlist:SetSelectedRow(4)
	
	local handler = InputHandler { Name="inputhandler" }
	handler.onKeyPressed = function(Self, Character, VirtualKey, ScanCode)
		local selectedRow = optionlist:GetSelectedRow()
		if VirtualKey == KeyCodes["BUTTON_START"] then
			local info=Session:GetInfo()
			local mustChangeTrack = false

			local gametype = GetSelectedItemValue(GameType)
			local gamemode = GetSelectedItemValue(GameMode)
			if gametype == 1 or gametype == 3 then
				gametype = gamemode
			elseif gametype == 2 then
				gametype = ReplicatedSession.GAMETYPE_STUNT
			else
				gametype = ReplicatedSession.GAMETYPE_TOURNAMENT
			end
			
			info.CarClass			= GetSelectedItemValue(CarType)
			info.CarUpgrades		= GetSelectedItemValue(Upgrades)
			info.NitroRegen			= GetSelectedItemValue(NitroRegen)
			info.MaxPublicSlots		= GetSelectedItemValue(Players) - GetSelectedItemValue(Reserved)
			info.MaxPrivateSlots	= GetSelectedItemValue(Reserved)
			info.Language			= GetSelectedItemValue(Language)
			info.DamageLevel		= GetSelectedItemValue(DamageLevel)
			info.DerbyDamageLevel	= GetSelectedItemValue(DerbyDamageLevel)

			menu_multiplayer_lobby_changeoptions.back()
		elseif VirtualKey == KeyCodes["BUTTON_SELECT"] then
			menu_multiplayer_lobby_changeoptions.back()
		elseif VirtualKey == KeyCodes["BUTTON_LEFT"] then
			local selectedItem = GetSelectedItem(selectedRow) - 1
			local numItems = GetNumItems(selectedRow)
			if selectedItem < 1 then
				selectedItem = numItems
			end
			SetSelectedItem(selectedRow,selectedItem)

			local onChanged = OptionItems[selectedRow][OnChanged]
			if onChanged ~= nil then
				onChanged(selectedRow)
			end

			optionlist:Refresh()
			UpdateInfoText()
		elseif VirtualKey == KeyCodes["BUTTON_RIGHT"] then
			local selectedItem = GetSelectedItem(selectedRow) + 1
			local numItems = GetNumItems(selectedRow)
			if selectedItem > numItems then
				selectedItem = 1
			end
			SetSelectedItem(selectedRow,selectedItem)

			local onChanged = OptionItems[selectedRow][OnChanged]
			if onChanged ~= nil then
				onChanged(selectedRow)
			end

			optionlist:Refresh()
			UpdateInfoText()
		elseif VirtualKey == KeyCodes["BUTTON_DOWN"] then
			-- Skip any disabled rows
			local prevsel = optionlist:GetSelectedRow()
			repeat
				optionlist:MoveNext()
			until OptionItems[optionlist:GetSelectedRow()][Enabled] == true or optionlist:GetSelectedRow() == table.getn(OptionItems)
			if optionlist:GetSelectedRow() == table.getn(OptionItems) and OptionItems[optionlist:GetSelectedRow()][Enabled] == false then
				optionlist:SetSelectedRow(prevsel)
			end

			UpdateInfoText()
		elseif VirtualKey == KeyCodes["BUTTON_UP"] then
			-- Skip any disabled rows
			local prevsel = optionlist:GetSelectedRow()
			repeat
				optionlist:MovePrev()
			until OptionItems[optionlist:GetSelectedRow()][Enabled] == true or optionlist:GetSelectedRow() == 1
			if optionlist:GetSelectedRow() == 1 and OptionItems[optionlist:GetSelectedRow()][Enabled] == false then
				optionlist:SetSelectedRow(prevsel)
			end

			UpdateInfoText()
		end
	end
	
	GUI:SetHelpButtons(BUTTON_OK, UI_ACCEPT, BUTTON_BACK, UI_BACK)
	UpdateInfoText()
	
	handler:SetFocus()
end
	
function menu_multiplayer_lobby_changeoptions.deinit(self)
	self.parent:deinit(self)
end

function menu_multiplayer_lobby_changeoptions.update(self,time)
	self.parent:update(self,time)
end
