--///////////////////////////////////////////////////////////////////////////
--// MultiplayerBuildTournament.bed
--///////////////////////////////////////////////////////////////////////////
--// Copyright (c) 2005 Bugbear Entertainment ltd. 
--// All Rights Reserved.
--// 
--// Created on 5.1.2006 16:14
--// 
--// @Author Pasi Matilainen (pasi.matilainen@bugbear.fi)
--///////////////////////////////////////////////////////////////////////////

dofile("data/menu/backdrops1.bed")
dofile("data/menu/backdrops2.bed")
dofile("data/menu/track_images.bed")
dofile("data/menu/selection_elements.bed")

local state={}

local BuildMenuButtons
local InitAddRaceOptions

local EditMode

local NEW_EVENT = 1
local EDIT_EVENT = 2

local Events = { }
local EventGrid = { }

local CurrentEvent
local CurRow
local CurCol

local ValidTracks
local SelectedTrack = 1

menu_multiplayer_buildtournament = CreateMenuFromTemplate("template_multiplayer")
menu_multiplayer_buildtournament.options.title = TITLE_LIVE_BUILD
menu_multiplayer_buildtournament.back = function() menu_multiplayer_buildtournament.backaction() end

function EnterBuildSplitScreenTournamentMenu(okaction, backaction)
	menu_multiplayer_buildtournament.okaction = okaction
	menu_multiplayer_buildtournament.backaction = backaction
	menu_multiplayer_buildtournament.splitscreen = true
	menu_multiplayer_buildtournament.type = ReplicatedSession.GAMETYPE_TOURNAMENT

	Events = { }

	EnterMenu("menu_multiplayer_buildtournament")
end

function EnterBuildTournamentMenu(tournamenttype, okaction, backaction, edit, numplayers)
	menu_multiplayer_buildtournament.okaction = okaction
	menu_multiplayer_buildtournament.backaction = backaction
	menu_multiplayer_buildtournament.type = tournamenttype
	menu_multiplayer_buildtournament.numplayers = numplayers
	menu_multiplayer_buildtournament.splitscreen = false
	
	Events = { }
	
	if edit and Session and Session:GetNumRaces() > 0 then
		local info = Session:GetInfo()
		for i = 1, Session:GetNumRaces() do
			Events[i] = { trackid = info.Races[i].StageNr, lapsOrTimeLimit = info.Races[i].LapsOrTimeLimit, numhunters = info.Races[i].NumHunters, rules = info.Races[i].EventType }
		end
	end
	 
	EnterMenu("menu_multiplayer_buildtournament")
end

local function ShowEventWindows()

	local delay=0.0
	local num_windows=table.getn(state.eventwindows)

	for i=1,num_windows do
		local w=state.eventwindows[i]
		
		AnimateWindowAlpha(w.image,0.0,1.0,0.2,delay)
		AnimateWindowAlpha(w.info,0.0,1.0,0.2,delay)

		if w.image_selected then
			AnimateWindowAlpha(w.image_selected,0.0,1.0,0.2,delay)

			AnimateWindowPos(w,w.position,POS(w.position[1]+40,w.position[2]),0.3,0.2+0.1*num_windows)
		end
		
		delay=delay+0.1
	end

end


local function HideEventWindows()
end

local Label=1
local ItemLabels=2
local ItemValues=3
local SelectedItem=4
local Enabled=5
local OnChanged=6

local OnGameTypeChanged, OnGameModeChanged, OnTrackTypeChanged

local GameModeRace = {
	MULTIPLAYER_GAMEMODE,
	{MULTIPLAYER_GAMEMODE_RACE, MULTIPLAYER_GAMEMODE_PONGRACE },
	{ReplicatedSession.GAMETYPE_RACE, ReplicatedSession.GAMETYPE_PONGRACE},
	1,
	true,
	function()OnGameModeChanged()end,
}

local GameModeDerby = {
	MULTIPLAYER_GAMEMODE,
	{MULTIPLAYER_GAMEMODE_WRECKINGDERBY, MULTIPLAYER_GAMEMODE_SURVIVORDERBY, MULTIPLAYER_GAMEMODE_FRAGDERBY, MULTIPLAYER_GAMEMODE_TAG },
	{ReplicatedSession.GAMETYPE_DERBY_WRECKING, ReplicatedSession.GAMETYPE_DERBY_LMS, ReplicatedSession.GAMETYPE_DERBY_FRAG, ReplicatedSession.GAMETYPE_HUNTER_PREY},
	1,
	true,
	function()OnGameModeChanged()end,
}

local GameModeEmpty = {
	MULTIPLAYER_GAMEMODE,
	{L""},
	{-1000},
	1,
	false,
}


local TimeLimitDerbyOption =
{
	MULTIPLAYER_TIMELIMIT,
	{L"6",L"9",L"12",L"15"},
	{6,9,12,15},
	1,
	true
}

local TimeLimitHunterPreyOption =
{
	MULTIPLAYER_TIMELIMIT,
	{L"5",L"10",L"15"},
	{5,10,15},
	1,
	true
}

local TimeLimitEmptyOption =
{
	MULTIPLAYER_LAPS,
	{L""},
	{-1000},
	1,
	false,
}

local LapsOption = 
{
	MULTIPLAYER_LAPS,
	{L"1", L"2", L"3", L"4", L"5", L"6", L"7", L"8", L"9", L"10" },
	{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
	4,
	true,
}

local NumHuntersOption =
{
	MULTIPLAYER_TAG_HUNTERS,
	{L"1", L"2", L"3", L"4" },
	{1, 2, 3, 4},
	4,
	true,
}

local TrackTypeEmpty = 
{
	MULTIPLAYER_TRACKTYPE,
	{L""},
	{-1000},
	1,
	false,
}

local TrackTypeRaces = 
{
	MULTIPLAYER_TRACKTYPE,
	{MULTIPLAYER_TRACKTYPE_FOREST, MULTIPLAYER_TRACKTYPE_FIELDS, MULTIPLAYER_TRACKTYPE_CANAL, MULTIPLAYER_TRACKTYPE_CITY, MULTIPLAYER_TRACKTYPE_DESERT, MULTIPLAYER_TRACKTYPE_RACING, MULTIPLAYER_TRACKTYPE_ARENA },
	{TRACKTYPE_FOREST, TRACKTYPE_FIELDS, TRACKTYPE_CANAL, TRACKTYPE_CITY, TRACKTYPE_DESERT, TRACKTYPE_RACING, -1},
	1,
	true,
	function()OnTrackTypeChanged()end,
}

local TrackTypeHunterPrey = 
{
	MULTIPLAYER_TRACKTYPE,
	{MULTIPLAYER_TRACKTYPE_DERBY, MULTIPLAYER_TRACKTYPE_ARENA, MULTIPLAYER_TRACKTYPE_FOREST, MULTIPLAYER_TRACKTYPE_FIELDS, MULTIPLAYER_TRACKTYPE_CANAL, MULTIPLAYER_TRACKTYPE_CITY, MULTIPLAYER_TRACKTYPE_DESERT, MULTIPLAYER_TRACKTYPE_RACING },
	{-2, -1, TRACKTYPE_FOREST, TRACKTYPE_FIELDS, TRACKTYPE_CANAL, TRACKTYPE_CITY, TRACKTYPE_DESERT, TRACKTYPE_RACING},
	1,
	true,
	function()OnTrackTypeChanged()end,
}

local NumHuntersEmpty =
{
	L"",
	{L""},
	{-1000},
	1,
	false,
}

local NumHuntersOption =
{
	L"NUMBER OF HUNTERS",
	{L"1", L"2", L"3", L"4"},
	{1, 2, 3, 4},
	4,
	true,
}

local AddRaceItems = {
	{
		MULTIPLAYER_GAMETYPE,
		{MULTIPLAYER_GAMETYPE_RACE, MULTIPLAYER_GAMETYPE_STUNT, MULTIPLAYER_GAMETYPE_DERBY },
		{1, 2, 3},
		1,
		true,
		function()OnGameTypeChanged()end,
	},
	{
--		MULTIPLAYER_GAMEMODE,
--		{L""},
--		{-1000},
--		1,
--		false,
	},
	{
--		MULTIPLAYER_TRACKTYPE,
--		{L""},
--		{-1000},
--		1,
--		false,
	},
	{
		-- Values set in OnTrackTypeChanged
		MULTIPLAYER_TRACK,
		{L""},
		{1},
		1,
		true,
	},
	{
		MULTIPLAYER_LAPS,
		{L"1", L"2", L"3", L"4", L"5", L"6", L"7", L"8", L"9", L"10" },
		{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		4,
		true,
	},
	{
--		L"NUMBER OF HUNTERS",
--		{L""},
--		{-1000},
--		1,
--		false,
	},
}

local GameType = 1
local GameMode = 2
local TrackType = 3
local Track = 4
local Laps = 5
local NumHunters = 6

local function GetSelectedItem(Items, RowNr)
	return Items[RowNr][SelectedItem]
end

local function SetSelectedItem(Items, RowNr, Item)
	Items[RowNr][SelectedItem]=Item
end

local function GetSelectedItemValue(Items, rowNr)
	return Items[rowNr][ItemValues][Items[rowNr][SelectedItem] ]
end

local function GetSelectedItemLabel(Items, rowNr)
	return Items[rowNr][ItemLabels][Items[rowNr][SelectedItem] ]
end

local function GetNumItems(Items, RowNr)
	return table.getn(Items[RowNr][ItemValues])
end

OnGameTypeChanged = function()
	local gameType = GetSelectedItemValue(AddRaceItems, GameType)
	ValidTracks = { }
	if gameType == 1 then -- Race
		AddRaceItems[GameMode] = GameModeRace
		AddRaceItems[TrackType] = TrackTypeRaces
		SetSelectedItem(AddRaceItems, GameMode, 1)
		SetSelectedItem(AddRaceItems, TrackType, 1)
		OnGameModeChanged()
		OnTrackTypeChanged()
	elseif gameType == 3 then -- Derby
		AddRaceItems[GameMode] = GameModeDerby
		SetSelectedItem(AddRaceItems, GameMode, 1)
		OnGameModeChanged()
	elseif gameType == 2 then -- Stunt
		AddRaceItems[GameMode] = GameModeEmpty
		AddRaceItems[GameMode][Enabled] = false
		AddRaceItems[TrackType] = TrackTypeEmpty
		OnGameModeChanged()
		ValidTracks = { }
		for i,l in ipairs(Levels) do
			if l and l.Rules == GR_STUNT then
				table.insert(ValidTracks, i)
			end
		end
	end
	SelectedTrack = 1
end

OnGameModeChanged = function()
	local gameMode = GetSelectedItemValue(AddRaceItems, GameMode)
	if gameMode == ReplicatedSession.GAMETYPE_RACE then
		AddRaceItems[Laps] = LapsOption
		AddRaceItems[Laps][Label] = MULTIPLAYER_LAPS
		AddRaceItems[NumHunters] = NumHuntersEmpty
	elseif gameMode == ReplicatedSession.GAMETYPE_PONGRACE then
		AddRaceItems[Laps] = LapsOption
		AddRaceItems[Laps][Label] = MULTIPLAYER_TURNS
		AddRaceItems[NumHunters] = NumHuntersEmpty
	elseif gameMode == ReplicatedSession.GAMETYPE_DERBY_LMS or gameMode == ReplicatedSession.GAMETYPE_DERBY_FRAG or gameMode == ReplicatedSession.GAMETYPE_DERBY_WRECKING then
		AddRaceItems[Laps] = TimeLimitDerbyOption
		AddRaceItems[NumHunters] = NumHuntersEmpty
		AddRaceItems[TrackType] = TrackTypeEmpty
		ValidTracks = { }
		for i,l in ipairs(Levels) do
			if l and (l.Rules == GR_DERBY or (l.Name and string.sub(l.Name, 1, 5) == "Arena")) then
				table.insert(ValidTracks, i)
			end
		end
	elseif gameMode == ReplicatedSession.GAMETYPE_HUNTER_PREY then
		AddRaceItems[Laps] = TimeLimitHunterPreyOption
		AddRaceItems[NumHunters] = NumHuntersOption
		AddRaceItems[TrackType] = TrackTypeHunterPrey
		OnTrackTypeChanged()
	else
		AddRaceItems[Laps] = TimeLimitEmptyOption
		AddRaceItems[NumHunters] = NumHuntersEmpty
	end	
end

OnTrackTypeChanged = function()
	local tt = GetSelectedItemValue(AddRaceItems, TrackType)
	ValidTracks = { }
	SelectedTrack = 1
	
	if tt == -1 then
		for i,l in ipairs(Levels) do
			if l.Name and string.sub(l.Name, 1, 5) == "Arena" then
				table.insert(ValidTracks, i)
			end
		end
	elseif tt == -2 then
		for i,l in ipairs(Levels) do
			if l and l.Rules == GR_DERBY then
				table.insert(ValidTracks, i)
			end
		end
	else
		for i,l in ipairs(Levels) do
			if l.TrackType and l.TrackType == tt then
				table.insert(ValidTracks, i)
			end
		end
	end
end

local images = {
	[TRACKTYPE_FOREST] = "forest",
	[TRACKTYPE_FIELDS] = "fields",
	[TRACKTYPE_DESERT] = "desert",
	[TRACKTYPE_CANAL] = "canals",
	[TRACKTYPE_CITY] = "city",
	[TRACKTYPE_RACING] = "racing",
}

local TrackTypeOffsets = {
	[TRACKTYPE_FOREST] = LevelIndex.Forest1A - 1,
	[TRACKTYPE_FIELDS] = LevelIndex.Fields1A - 1,
	[TRACKTYPE_DESERT] = LevelIndex.Desert1A - 1,
	[TRACKTYPE_CANAL] = LevelIndex.Canal1A - 1,
	[TRACKTYPE_CITY] = LevelIndex.City1A - 1,
	[TRACKTYPE_RACING] = LevelIndex.Racing1A - 1,
}

local function GetTrackIndex(tracknum)
	local trackindex
	if tracknum >= LevelIndex.CURLING and tracknum <= LevelIndex.ROYALFLUSH then
		trackindex = tracknum - LevelIndex.CURLING + 1
	elseif tracknum >= LevelIndex.SKIJUMP and tracknum <= LevelIndex.SOCCER then
		trackindex = tracknum - LevelIndex.SKIJUMP + 1 + 6
	elseif tracknum >= LevelIndex.Arena1 and tracknum <= LevelIndex.Arena6 then
		trackindex = tracknum - LevelIndex.Arena1 + 1
	elseif tracknum >= LevelIndex.Derby1A and tracknum <= LevelIndex.Derby6A then
		trackindex = tracknum - LevelIndex.Derby1A + 1
	elseif tracknum >= LevelIndex.Nascar1A and tracknum <= LevelIndex.Nascar1C then
		trackindex = tracknum - LevelIndex.Nascar1A + 1
	else
		trackindex = tracknum - TrackTypeOffsets[Levels[tracknum].TrackType]
	end
	return trackindex
end

local function RefreshEventGrid(self)
	for i,event in ipairs(Events) do
		wm.GetWindow("event_icon_"..i):AttachResource(self:getResource(Levels[event.trackid].TrackIcon))
		if event.rules == ReplicatedSession.GAMETYPE_STUNT or event.rules == ReplicatedSession.GAMETYPE_DERBY_LMS then
			wm.GetWindow("event_info_"..i):SetTitle(L"")
		else
			wm.GetWindow("event_info_"..i):SetTitle(L(event.lapsOrTimeLimit))
		end
	end
	for i = table.getn(Events) + 1, 12 do
		wm.GetWindow("event_icon_"..i):AttachResource(self:getResource("track_images1_empty_box"))
		wm.GetWindow("event_info_"..i):SetTitle(L"")
	end
end

local EventVarNames =
{
	[ReplicatedSession.GAMETYPE_RACE] = MULTIPLAYER_LAPS,
	[ReplicatedSession.GAMETYPE_PONGRACE] = MULTIPLAYER_TURNS,
	[ReplicatedSession.GAMETYPE_DERBY_FRAG] = MULTIPLAYER_ROUNDTIME,
	[ReplicatedSession.GAMETYPE_HUNTER_PREY] = MULTIPLAYER_ROUNDTIME,
}

local Presets = {
	{ name=L"Outdoors Tournament", desc=PRESETS_OUTDOOR, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_fields1", events={
		{ trackid=LevelIndex.Forest1A },
		{ trackid=LevelIndex.Desert1B },
		{ trackid=LevelIndex.Fields1A },
		{ trackid=LevelIndex.Forest1C },
		{ trackid=LevelIndex.Desert1A },
		{ trackid=LevelIndex.Fields1C },
		{ trackid=LevelIndex.Forest1B },
		{ trackid=LevelIndex.Desert1C },
		{ trackid=LevelIndex.Fields1B },
	} },
	{ name=L"Forest Tournament", desc=PRESETS_FOREST, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_forest1", events={
		{ trackid=LevelIndex.Forest1A },
		{ trackid=LevelIndex.Forest2B },
		{ trackid=LevelIndex.Forest1C },
		{ trackid=LevelIndex.Forest2A },
		{ trackid=LevelIndex.Forest1B },
		{ trackid=LevelIndex.Forest2C },
	} },
	{ name=L"Urban Tournament", desc=PRESETS_URBAN, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_city1", events={
		{ trackid=LevelIndex.City2A },
		{ trackid=LevelIndex.Canal1B },
		{ trackid=LevelIndex.City2C },
		{ trackid=LevelIndex.Canal1A },
		{ trackid=LevelIndex.City1B },
		{ trackid=LevelIndex.Canal1C },
		{ trackid=LevelIndex.City1A },
		{ trackid=LevelIndex.City2B },
		{ trackid=LevelIndex.City1C },
	} },
	{ name=L"Desert Tournament", desc=PRESETS_DESERT, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_desert1", events={
		{ trackid=LevelIndex.Desert1A },
		{ trackid=LevelIndex.Desert1B },
		{ trackid=LevelIndex.Desert1C },
	} },
	{ name=L"Canal Tournament", desc=PRESETS_CANAL, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_canals1", events={
		{ trackid=LevelIndex.Canal1A },
		{ trackid=LevelIndex.Canal1B },
		{ trackid=LevelIndex.Canal1C },
	} },
	{ name=L"Racing Tournament", desc=PRESETS_RACING, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_racing1", events={
		{ trackid=LevelIndex.Racing1A },
		{ trackid=LevelIndex.Racing2C },
		{ trackid=LevelIndex.Racing1B },
		{ trackid=LevelIndex.Racing2A },
		{ trackid=LevelIndex.Racing2B },
		{ trackid=LevelIndex.Racing1C },
	} },
	{ name=L"Fields Tournament", desc=PRESETS_FIELDS, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_fields3", events={
		{ trackid=LevelIndex.Fields2A },
		{ trackid=LevelIndex.Fields1A },
		{ trackid=LevelIndex.Fields2B },
		{ trackid=LevelIndex.Fields1B },
		{ trackid=LevelIndex.Fields2C },
		{ trackid=LevelIndex.Fields1C },
	} },
	{ name=L"Mixed Challenge", desc=PRESETS_MIXED1, type=ReplicatedSession.GAMETYPE_TOURNAMENT, icon="track_images_derby1", events={
		{ trackid=LevelIndex.Derby1A, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.Racing2B, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.STONESKIPPING, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Fields1A, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.RINGOFFIRE, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Derby6A, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.City2B, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Nascar1A, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.SKIJUMP, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Forest1B, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Arena6, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.CURLING, rules=ReplicatedSession.GAMETYPE_STUNT },
	} },
	{ name=L"Mixed Challenge 2", desc=PRESETS_MIXED2, type=ReplicatedSession.GAMETYPE_TOURNAMENT, icon="track_images_derby3", events={
		{ trackid=LevelIndex.SOCCER, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Desert1C, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Derby4A, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.BASKETBALL, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Canal1A, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Arena5, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.HIGHJUMP, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Forest2A, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Nascar1B, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Derby3A, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.BOWLING, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.City1B, rules=ReplicatedSession.GAMETYPE_RACE },
	} },
	{ name=L"Grand Derby Challenge", desc=PRESETS_DERBY, type=ReplicatedSession.GAMETYPE_DERBY_WRECKING, icon="track_images_derby5", events={
		{ trackid=LevelIndex.Derby1A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby2A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby3A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby4A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby5A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby6A, lapsOrTimeLimit=6 },
	} },
	{ name=L"Special Challenge", desc=PRESETS_SPECIAL, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_oval1", events={
		{ trackid=LevelIndex.Nascar1A },
		{ trackid=LevelIndex.Arena1 },
		{ trackid=LevelIndex.Arena5 },
		{ trackid=LevelIndex.Arena3 },
		{ trackid=LevelIndex.Nascar1C },
		{ trackid=LevelIndex.Arena4 },
		{ trackid=LevelIndex.Arena2 },
		{ trackid=LevelIndex.Arena6 },
		{ trackid=LevelIndex.Nascar1B },
	} },
	{ name=L"Grand Stunts Challenge", desc=PRESETS_STUNT, type=ReplicatedSession.GAMETYPE_STUNT, icon="track_images_stunt2", events={
		{ trackid=LevelIndex.CURLING },
		{ trackid=LevelIndex.HIGHJUMP },
		{ trackid=LevelIndex.STONESKIPPING },
		{ trackid=LevelIndex.RINGOFFIRE },
		{ trackid=LevelIndex.DARTS },
		{ trackid=LevelIndex.ROYALFLUSH },
		{ trackid=LevelIndex.SKIJUMP },
		{ trackid=LevelIndex.FIELDGOAL },
		{ trackid=LevelIndex.BOWLING },
		{ trackid=LevelIndex.BASKETBALL },
		{ trackid=LevelIndex.BASEBALL },
		{ trackid=LevelIndex.SOCCER },
	} },
}

menu_multiplayer_tournament_presets = CreateMenuFromTemplate("template_basic")
menu_multiplayer_tournament_presets.options.title = TITLE_LIVE_PRESETS
menu_multiplayer_tournament_presets.back = entermenu("menu_multiplayer_buildtournament")

function menu_multiplayer_tournament_presets.create(self)
	self.parent:create(self)
	
	self:addResource("backdrops1.tga",backdrops1,backdrops1_size)
	self:addResource("backdrops2.tga",backdrops2,backdrops2_size)
	self:addResource("track_images.tga",track_images,track_images_size)
	self:addResource("selection_elements.tga",selection_elements,selection_elements_size)

	self:loadResources()
	
	self.items = { }
end

function menu_multiplayer_tournament_presets.init(self)
	self.parent:init(self)

	local pos = POS(340,253)
	local p = Frame{Name="info_window",Position=pos,Size=SIZE(288,100)}

	Frame { Position=RELATIVEPOS(POS(340,253),pos), Size=SIZE(69,100), Parent=p }:AttachResource(self:getResource("backdrop_detailed_tip"))
	Frame { Position=RELATIVEPOS(POS(409,253),pos), Size=SIZE(219,100), Parent=p }:AttachResource(self:getResource("backdrop_detailed_main"))

	StaticText { Name="preset_name", Font=fontmedium(), Color=GetPaletteColor(3), Position=POS(357,255), Size=SIZE(200,19) }
	StaticText { Name="preset_description", WordWrap=TRUE, Font=fontmedium(), Color=GetPaletteColor(5), Position=POS(390,275), Size=SIZE(216,75) }
	
	local ppos = POS(0,62)
	p = Frame{Name="track_image_bar",Position=ppos,Size=SIZE(640,22)}:AttachResource(self:getResource("black_transparent_50"))

	--//backdrop
	local resource = self:getResource("backdrop_normal")
	local size = GetResourceSize(resource)

	Frame { Position=POS(56,84), Size=size}:AttachResource(resource)
	Frame { Position=POS(81,169), Size=size}:AttachResource(resource)
	Frame { Position=POS(106,254), Size=size}:AttachResource(resource)
	Frame { Position=POS(131,339), Size=size}:AttachResource(resource)

	--//races
	state.eventwindows={}

	local rowpositions={
		POS(82,128),
		POS(94,170),
		POS(105,212),
		POS(117,254),
	}

	local imgsize = wm.GetResourceSize(self:getResource("track_images_forest1"))
	for i=1,12 do
		local pos = rowpositions[math.floor((i-1)/3)+1]
		local x = pos[1] + 71 * math.mod(i-1,3)
		local w = Frame { Name="event_icon_frame_"..i, Position=POS(x,pos[2]), Size=imgsize }
		w.position=POS(x,pos[2])

		local imageframe = Frame { Name="event_icon_"..i, Position=POS(0,0), Size=imgsize, Parent=w }
		
		if Events[i] then
			w.image = imageframe:AttachResource(self:getResource(Levels[Events[i].trackid].TrackIcon))
			w.image:SetAlpha(0)
		else
			w.image = imageframe:AttachResource(self:getResource("track_images1_empty_box"))
			w.image:SetAlpha(0)
		end

		w.info = StaticText { Name="event_info_"..i, Position=POS(60,18), Size=SIZE(20,20), Font=fontmedium(), Color=GetPaletteColor(1), Parent=w }

		table.insert(state.eventwindows,w)
	end
	
	local validpresets = { }
	local ttype = menu_multiplayer_buildtournament.type
	for k,p in pairs(Presets) do
		local add = false
		if menu_multiplayer_buildtournament.splitscreen then
			-- Don't show stunt tournaments or mixed tournaments with stunt events in splitscreen mode
			if p.type ~= ReplicatedSession.GAMETYPE_STUNT then
				local add = true
				if p.type == ReplicatedSession.GAMETYPE_TOURNAMENT then
					for k2,e in pairs(p.events) do
						if e.rules == ReplicatedSession.GAMETYPE_STUNT then
							add = false
							break
						end
					end
				end
			end
		elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY and (p.type == ReplicatedSession.GAMETYPE_DERBY_FRAG or p.type == ReplicatedSession.GAMETYPE_DERBY_LMS or p.type == ReplicatedSession.GAMETYPE_DERBY_WRECKING or p.type == ReplicatedSession.GAMETYPE_HUNTER_PREY) then
			add = true
		elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE and (p.type == ReplicatedSession.GAMETYPE_PONGRACE or p.type == ReplicatedSession.GAMETYPE_RACE) then
			add = true
		elseif ttype == p.type then
			add = true
		end

		if add then
			local preset = { }
			preset.name = p.name
			preset.desc = p.desc
			preset.type = p.type
			preset.icon = p.icon
			preset.events = { }
			
			-- Copy events and set missing event parameters where needed
			for pk,e in pairs(p.events) do
				local event = { }
				for ek,ev in pairs(e) do
					event[ek] = ev
				end
				if event.rules == nil then
					event.rules = p.type
				end
				if event.lapsOrTimeLimit == nil and Levels[event.trackid].Laps ~= nil then
					event.lapsOrTimeLimit = Levels[event.trackid].Laps
				end
				table.insert(preset.events, event)
			end
			table.insert(validpresets, preset)
		end
	end
	
	local bar = ButtonBar { Slots=9,Name="presets",Position=POS(0,357),Padding=0,SelectedSlotSize=SIZE(70,37),SlotSize=SIZE(70,37),Size=SIZE(600,60) }
	local oldEvents = { }
	for k,v in pairs(Events) do
		oldEvents[k] = v
	end
	
	function bar.onBack(self)
		Events = { }
		for k,v in pairs(oldEvents) do
			Events[k] = v
		end
		EnterMenu("menu_multiplayer_buildtournament")
	end

	bar.onButtonChange = function(bself,id)
		Events = validpresets[id].events
--[[		Events = { }
		
		-- Copy the table so that future edits in build tournament screen don't modify the preset
		for i,e in ipairs(validpresets[id].events) do
			Events[i] = { rules = e.rules, trackid = e.trackid, lapsOrTimeLimit = e.lapsOrTimeLimit, numhunters = e.numhunters }
		end--]]

		RefreshEventGrid(self)
		if validpresets[id].name then
			wm.GetWindow("preset_name"):SetTitle(validpresets[id].name)
		end
		if validpresets[id].desc then
			wm.GetWindow("preset_description"):SetTitle(validpresets[id].desc)
		end
		wm.GetWindow("preset_description"):WordWrap()
	end

	bar.onChildAction = function(self,id)
		EnterMenu("menu_multiplayer_buildtournament")
	end

	for k,p in pairs(validpresets) do
		bar:AddButton(self:getResource(p.icon))
	end

	bar:onButtonChange(1)
	bar:SetFocus()
end

function menu_multiplayer_tournament_presets.deinit(self)
	self.parent:deinit(self)
end

function menu_multiplayer_tournament_presets.startshow(self)
	self.parent:startshow(self)

	ShowEventWindows()
end

function menu_multiplayer_tournament_presets.starthide(self)
	self.parent:starthide(self)

	HideEventWindows()
end

local function ShowPresets()
	EnterMenu("menu_multiplayer_tournament_presets")
end

local function StartAddEvent()
	EditMode = NEW_EVENT
	
	GUI:HideMenuButtons()
	
	InitAddRaceOptions(menu_multiplayer_buildtournament.type)

	local ar_optionlist = wm.GetWindow("ar_optionlist")
	ar_optionlist:SetSelectedRow(1)
	while AddRaceItems[ar_optionlist:GetSelectedRow()][Enabled] == false do
		ar_optionlist:MoveNext()
	end
	wm.GetWindow("ar_popup"):ShowWindow()
	wm.GetWindow("ar_handler"):SetFocus()
end

local function StartEditEvents()
	GUI:HideMenuButtons()
	CurRow = 0
	CurCol = 0
	CurrentEvent = 1
	local x,y = wm.GetWindow("event_icon_frame_"..CurrentEvent):GetPosition()
	wm.GetWindow("highlight"):SetPosition(x-4, y-6)
	wm.GetWindow("highlight"):ShowWindow()
	wm.GetWindow("edit_handler"):SetFocus()
	GUI:SetHelpButtons(BUTTON_OK, UI_SELECT, BUTTON_BACK, UI_BACK, BUTTON_EXTRA, UI_DELETE)
end

local function CreateTournament()
	GUI:HideMenuButtons()
	menu_multiplayer_buildtournament.okaction(Events)
end

BuildMenuButtons = function(self)
	menu_multiplayer_buildtournament.items = { }
	if table.getn(Events) < 12 then	
		table.insert(menu_multiplayer_buildtournament.items,
			{ ICON_LIVE_BUILD_ADDTRACK, function() StartAddEvent() end, ICON(menu_multiplayer_buildtournament,"icon_add_track") } )
	end
	
	local ttype = menu_multiplayer_buildtournament.type
	for k,p in pairs(Presets) do
		local showpresets = false
		if menu_multiplayer_buildtournament.splitscreen then
			-- Don't show stunt tournaments or mixed tournaments with stunt events in splitscreen mode
			if p.type ~= ReplicatedSession.GAMETYPE_STUNT then
				local showpresets = true
				if p.type == ReplicatedSession.GAMETYPE_TOURNAMENT then
					for k2,e in pairs(p.events) do
						if e.rules == ReplicatedSession.GAMETYPE_STUNT then
							showpresets = false
							break
						end
					end
				end
			end
		elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY and (p.type == ReplicatedSession.GAMETYPE_DERBY_FRAG or p.type == ReplicatedSession.GAMETYPE_DERBY_LMS or p.type == ReplicatedSession.GAMETYPE_DERBY_WRECKING or p.type == ReplicatedSession.GAMETYPE_HUNTER_PREY) then
			showpresets = true
		elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE and (p.type == ReplicatedSession.GAMETYPE_PONGRACE or p.type == ReplicatedSession.GAMETYPE_RACE) then
			showpresets = true
		elseif ttype == p.type then
			showpresets = true
		end

		if showpresets then
			table.insert(menu_multiplayer_buildtournament.items,
				{ ICON_LIVE_BUILD_PRESETS, function() ShowPresets() end, ICON(menu_multiplayer_buildtournament,"icon_presets") } )
			break
		end
	end

	if table.getn(Events) > 0 then
		table.insert(menu_multiplayer_buildtournament.items,
			{ ICON_LIVE_BUILD_EDITTRACK, function() StartEditEvents() end, ICON(menu_multiplayer_buildtournament,"icon_edit_events") } )
		table.insert(menu_multiplayer_buildtournament.items,
			{ ICON_LIVE_CONTINUE, function() CreateTournament() end, ICON(menu_multiplayer_buildtournament,"icon_continue") } )
	end
	
	GUI:HideMenuButtons()
	GUI:InitMenuButtons(menu_multiplayer_buildtournament.items)
	GUI:ShowMenuButtons()
	GUI:SetActiveItem(1)
end

function menu_multiplayer_buildtournament.create(self)
	self.parent:create(self)

	self:addResource("backdrops1.tga",backdrops1,backdrops1_size)
	self:addResource("backdrops2.tga",backdrops2,backdrops2_size)
	self:addResource("track_images.tga",track_images,track_images_size)
	self:addResource("selection_elements.tga",selection_elements,selection_elements_size)

	self:loadResources()
	
	BuildMenuButtons()
end

InitAddRaceOptions = function(ttype, event)
	if (ttype == ReplicatedSession.GAMETYPE_TOURNAMENT or ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE or ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY) and event == nil then
		-- "Add race" init with tournament types that have multiple game modes to choose from
		if ttype == ReplicatedSession.GAMETYPE_TOURNAMENT or ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE then
			SetSelectedItem(AddRaceItems, GameType, 1)
		elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY then
			SetSelectedItem(AddRaceItems, GameType, 3)
		end
		OnGameTypeChanged()
		SetSelectedItem(AddRaceItems, GameMode, 1)
		AddRaceItems[GameType][Enabled] = (ttype == ReplicatedSession.GAMETYPE_TOURNAMENT)
		AddRaceItems[GameMode][Enabled] = true
	else
		-- "Add race" init with a specific game mode or "Edit event" init
		local etype
		if event == nil then
			etype = ttype
		else
			etype = event.rules
		end	
	
		if ttype == ReplicatedSession.GAMETYPE_TOURNAMENT or ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE or ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY then
			AddRaceItems[GameType][Enabled] = (ttype == ReplicatedSession.GAMETYPE_TOURNAMENT)
			AddRaceItems[GameMode][Enabled] = true
		else
			AddRaceItems[GameType][Enabled] = false
			AddRaceItems[GameMode][Enabled] = false
		end
	
		if etype == ReplicatedSession.GAMETYPE_TOURNAMENT then
			SetSelectedItem(AddRaceItems, GameType, 1)
		elseif etype == ReplicatedSession.GAMETYPE_RACE or etype == ReplicatedSession.GAMETYPE_PONGRACE then
			SetSelectedItem(AddRaceItems, GameType, 1)
		elseif etype == ReplicatedSession.GAMETYPE_STUNT then
			SetSelectedItem(AddRaceItems, GameType, 2)
		else
			SetSelectedItem(AddRaceItems, GameType, 3)
		end
		OnGameTypeChanged()

		for i = 1, table.getn(AddRaceItems[GameMode][ItemValues]) do
			if AddRaceItems[GameMode][ItemValues][i] == etype then
				SetSelectedItem(AddRaceItems, GameMode, i)
				OnGameModeChanged()
				break
			end
		end
	
		if event then
			if etype == ReplicatedSession.GAMETYPE_RACE or etype == ReplicatedSession.GAMETYPE_PONGRACE then
				local tracktype = Levels[event.trackid].TrackType
				local level = Levels[event.trackid]
				local tracktype
				if level.TrackType == TRACKTYPE_EVENT then
					tracktype = -1 -- Arena & Nascar tracks
				else
					tracktype = level.TrackType
				end
				for i = 1, table.getn(AddRaceItems[TrackType][ItemValues]) do
					if AddRaceItems[TrackType][ItemValues][i] == tracktype then
						SetSelectedItem(AddRaceItems, TrackType, i)
						break
					end
				end
				OnTrackTypeChanged()
			end
		
			if etype == ReplicatedSession.GAMETYPE_RACE or etype == ReplicatedSession.GAMETYPE_PONGRACE or etype == ReplicatedSession.GAMETYPE_DERBY_FRAG or etype == ReplicatedSession.GAMETYPE_HUNTER_PREY then
				for i = 1, table.getn(AddRaceItems[Laps][ItemValues]) do
					if AddRaceItems[Laps][ItemValues][i] == event.lapsOrTimeLimit then
						SetSelectedItem(AddRaceItems, Laps, i)
						break
					end
				end
			end
			
			if etype == ReplicatedSession.GAMETYPE_HUNTER_PREY then
				local level = Levels[event.trackid]
				local tracktype
				if level.TrackType == TRACKTYPE_EVENT then
					if level.Rules == GR_DERBY then
						tracktype = -2 -- Derby tracks
					else
						tracktype = -1 -- Arena & Nascar tracks
					end
				else
					tracktype = level.TrackType
				end

				for i = 1, table.getn(AddRaceItems[TrackType][ItemValues]) do
					if AddRaceItems[TrackType][ItemValues][i] == tracktype then
						SetSelectedItem(AddRaceItems, TrackType, i)
						break
					end
				end
				OnTrackTypeChanged()
				for i = 1, table.getn(AddRaceItems[NumHunters][ItemValues]) do
					if AddRaceItems[NumHunters][ItemValues][i] == event.numhunters then
						SetSelectedItem(AddRaceItems, NumHunters, i)
						break
					end
				end
			end
			
			SelectedTrack = GetTrackIndex(event.trackid)
		end
	end

	local ar_optionlist = wm.GetWindow("ar_optionlist")
	ar_optionlist:SetSelectedRow(1)
	while AddRaceItems[ar_optionlist:GetSelectedRow()][Enabled] == false do
		ar_optionlist:MoveNext()
	end
end

local function CreateEditRaceItems(self)
	-- "Edit events" inputhandler
	local handler = InputHandler { Name="edit_handler" }
	handler.onKeyPressed = function(Self, Character, VirtualKey, ScanCode)
		if VirtualKey == KeyCodes["BUTTON_START"] then
			InitAddRaceOptions(menu_multiplayer_buildtournament.type, Events[CurrentEvent])

			local ar_optionlist = wm.GetWindow("ar_optionlist")
			ar_optionlist:SetSelectedRow(1)
			while AddRaceItems[ar_optionlist:GetSelectedRow()][Enabled] == false do
				ar_optionlist:MoveNext()
			end
			
			EditMode = EDIT_EVENT
			
			wm.GetWindow("ar_popup"):ShowWindow()
			wm.GetWindow("ar_handler"):SetFocus()
		elseif VirtualKey == KeyCodes["BUTTON_SELECT"] then
			BuildMenuButtons()		
			wm.GetWindow("highlight"):HideWindow()
			GUI:SetHelpButtons(BUTTON_OK, UI_SELECT, BUTTON_BACK, UI_BACK)
		elseif (XBOX and VirtualKey == KeyCodes["BUTTON_Y"]) or (PS2 and VirtualKey == KeyCodes["BUTTON_X"]) then
			table.remove(Events, CurrentEvent)
			if CurrentEvent > table.getn(Events) then
				CurrentEvent = table.getn(Events)
				CurRow = math.floor((CurrentEvent-1) / 3)
				CurCol = math.mod(CurrentEvent-1, 3)
			end
			RefreshEventGrid(self)
			if table.getn(Events) == 0 then
--				Events = { }
				BuildMenuButtons()
				wm.GetWindow("highlight"):HideWindow()
				GUI:SetHelpButtons(BUTTON_OK, UI_SELECT, BUTTON_BACK, UI_BACK)
			end
		elseif VirtualKey == KeyCodes["BUTTON_DOWN"] then
			CurRow = math.mod(CurRow + 1, 4)
			if Events[CurRow*3+CurCol+1] == nil then
				CurRow = 0
			end
			CurrentEvent = CurRow*3+CurCol+1
		elseif VirtualKey == KeyCodes["BUTTON_UP"] then
			repeat
				CurRow = math.mod(CurRow - 1 + 4, 4)
				CurrentEvent = CurRow*3+CurCol+1
			until Events[CurrentEvent] ~= nil
		elseif VirtualKey == KeyCodes["BUTTON_LEFT"] then
			repeat
				CurCol = math.mod(CurCol - 1 + 3, 3)
				CurrentEvent = CurRow*3+CurCol+1
			until Events[CurrentEvent] ~= nil
		elseif VirtualKey == KeyCodes["BUTTON_RIGHT"] then
			CurCol = math.mod(CurCol + 1, 3)
			if Events[CurRow*3+CurCol+1] == nil then
				CurCol = 0
			end
			CurrentEvent = CurRow*3+CurCol+1
		end
		
		if Events[CurrentEvent] then
			local x,y = wm.GetWindow("event_icon_frame_"..CurrentEvent):GetPosition()
			wm.GetWindow("highlight"):SetPosition(x-4, y-6)
		end
	end
end

local function CreateAddRaceItems(self)
	-- "Edit race" + "Add race" popup buttons
	local backbutton, okbutton, infobutton
	if PS2 then
		backbutton = "ps2_triangle"
		okbutton = "ps2_cross"
		infobutton = "ps2_circle"
	elseif XBOX then
		backbutton = "xbox_b"
		okbutton = "xbox_a"
		infobutton = "xbox_x"
	end
	buttonsize = wm.GetResourceSize(backbutton)
	
	-- "Add race" popup
	bg = Frame { Name="ar_popup", Position=POS(0,0), Size=SIZE(640,480), Layer=5 }
	bg:AttachResource(wm.GetResource("wide_black_bar_50"))
	bg:HideWindow()
	bgbox = Frame { Name="ar_box", Position=POS(133,135), Size=SIZE(375,198), ShowBorders=TRUE, Layer=6, Parent=bg }

	local arrowSize = GetResourceSize(self:getResource("option_arrow_l"))

	-- Race options list (laps etc)
	listboxParams = {
		ListBoxTemplate	= { Name="ar_optionlist", Layer=6, Parent=bgbox },
		Left			= 2,
		Top				= 15,
		LeftPadding		= 0,
		RightPadding	= 0,
		TopPadding		= 0,
		BottomPadding	= 0,
		RowWidth		= 371,
		RowHeight		= 19,
		RowPadding		= 0,
		RowTemplate		= { Layer=6 },
		RowTemplateType	= "Frame",
		RowName			= "arlist",
		RowTemplateCust	= function(Row, RowNr)
		end,
		NumRows	= 7,
		Coloumns = {
			[1] = {
				Name				= "ar_optiontitle", -- _row# is added
				ColoumnTemplate		= { Font=fontmedium(), Color=GetPaletteColor(1), Position=POS(150, 1), Size=SIZE(148, 13), Align=FONTF_RIGHT, Layer=5 },
				ColoumnTemplateType	= "StaticText",
				ColoumnTemplateCust	= function(Coloumn, RowNr, ColoumnNr)
				end
			},
			[2]	= {
				Name				= "ar_leftarrow", -- _row# is added
				ColoumnTemplate		= { Position=POS(175,3), Size=arrowSize, Layer=5 },
				ColoumnTemplateType	= "Frame",
				ColoumnTemplateCust	= function(Coloumn, RowNr, ColoumnNr)
					Coloumn:AttachResource(self:getResource("option_arrow_r"))
				end
			},
			[3] = {
				Name				= "ar_optionvalue", -- _row# is added
				ColoumnTemplate		= { Font=fontmedium(), Position=POS(181, 5), Size=SIZE(174,13), Align=FONTF_CENTER, Layer=5 },
				ColoumnTemplateType	= "Button",
				ColoumnTemplateCust	= function(Coloumn, RowNr, ColoumnNr)
				end
			},
			[4] = {
				Name				= "ar_rightarrow", -- _row# is added
				ColoumnTemplate		= { Position=POS(355, 3), Size=arrowSize, ShowBorders=FALSE, Layer=5 },
				ColoumnTemplateType	= "Frame",
				ColoumnTemplateCust	= function(Coloumn, RowNr, ColoumnNr)
					Coloumn:AttachResource(self:getResource("option_arrow_l"))
				end
			},
		}
	}

	local x = 375 - 12
	local function updatebutton(buttonname)
		local button,buttontitle,buttony,titley,buttonwidth,w,_
		
		buttontitle = wm.GetWindow(buttonname.."_title")
		_,titley = buttontitle:GetPosition()

		w,_ = wm.GetTextExtents(buttontitle:GetTitle(), fontmedium())
		x = x - w
		buttontitle:SetPosition(x, titley)
		
		button = wm.GetWindow(buttonname)
		_,buttony = button:GetPosition()

		buttonwidth,_ = button:GetSize()
		x = x - buttonwidth - 4
		button:SetPosition(x, buttony)
		
		x = x - 20
	end

	local win = Frame { Name="ar_okbutton", Position=POS(300,170), Size=buttonsize, Parent=bgbox, Layer=6 }
	win:AttachResource(wm.GetResource(okbutton))
	StaticText { Name="ar_okbutton_title", Title=UI_SELECT, Position=POS(320,169), Size=SIZE(50,13), Color=GetPaletteColor(1), Font=fontmedium(), Parent=bgbox, Layer=6 }
	updatebutton("ar_okbutton")	
	
	win = Frame { Name="ar_backbutton", Position=POS(230,170), Size=buttonsize, Parent=bgbox, Layer=6 }
	win:AttachResource(wm.GetResource(backbutton))
	StaticText { Name="ar_backbutton_title", Title=UI_BACK, Position=POS(252,169), Size=SIZE(50,13), Color=GetPaletteColor(1), Font=fontmedium(), Parent=bgbox, Layer=6 }
	updatebutton("ar_backbutton")	

	local ar_optionlist = CreateMultiColoumnListBox(listboxParams)
	
	local function SetWindowY(name, y)
		local x,_ = wm.GetWindow(name):GetPosition()
		wm.GetWindow(name):SetPosition(x,y)
	end
	
	local trackiconsize = wm.GetResourceSize(self:getResource("track_images_forest1"))
	
	-- Fix track selection image position & size
	wm.GetWindow("ar_optionvalue_row4"):SetPosition(180+174/2-trackiconsize[1]/2, 3)
	wm.GetWindow("ar_optionvalue_row4"):SetSize(trackiconsize[1], trackiconsize[2])
	
	-- Fix the rest of the row positions & other items on row 4
	local w,h = wm.GetWindow("arlist_row4"):GetSize()
	SetWindowY("arlist_row5", 101)
	SetWindowY("arlist_row6", 120)
	wm.GetWindow("arlist_row4"):SetSize(w, 44)
	
	SetWindowY("ar_optiontitle_row4", 11)
	SetWindowY("ar_leftarrow_row4", 14)
	SetWindowY("ar_rightarrow_row4", 14)

	ar_optionlist:SetSelectedRow(1)
	ar_optionlist.onNeedData = function(Self, RowObject, RowNr, ControlRowNr)
		local title = wm.GetWindow("ar_optiontitle_row"..RowNr)
		local value = wm.GetWindow("ar_optionvalue_row"..RowNr)
		local leftarrow = wm.GetWindow("ar_leftarrow_row"..RowNr)
		local rightarrow = wm.GetWindow("ar_rightarrow_row"..RowNr)

		if RowNr == ar_optionlist:GetSelectedRow() then
			RowObject:AttachResource(wm.GetResource("wide_white_bar_30"))
		else
			RowObject:AttachResource(wm.GetResource("wide_black_bar_50"))
		end

		title:SetTitle(AddRaceItems[RowNr][Label])
		if AddRaceItems[RowNr][Enabled] then
			title:SetColor(GetPaletteColor(33), false)
			value:SetColor(GetPaletteColor(34), false)
			leftarrow:ShowWindow()
			rightarrow:ShowWindow()
			
			title:SetLayer(6)
			value:SetLayer(6)
			leftarrow:SetLayer(6)
			rightarrow:SetLayer(6)
		else
			value:SetColor(GetPaletteColor(34), false)
			title:SetColor(GetPaletteColor(33), false)
			leftarrow:HideWindow()
			rightarrow:HideWindow()

			title:SetLayer(5)
			value:SetLayer(5)
			leftarrow:SetLayer(5)
			rightarrow:SetLayer(5)
		end
				
		if RowNr == 4 then
			local level = Levels[ValidTracks[SelectedTrack]]
			if level then
				local imagename = level.TrackIcon
				value:AttachResource(self:getResource(imagename))
				value:SetTitle(L(level.Name))
			else
				value:AttachResource(nil)
			end
		else
			value:SetTitle(GetSelectedItemLabel(AddRaceItems, RowNr))
		end
	end

	ar_optionlist:SetNumRows(6)

	InitAddRaceOptions(menu_multiplayer_buildtournament.type)

	ar_optionlist:SetSelectedRow(1)
	ar_optionlist:Refresh()
	
	-- "Add race" popup inputhandler
	local ar_optionshandler = InputHandler { Name="ar_handler", Parent=bgbox }
	ar_optionshandler.onKeyPressed = function(Self, Character, VirtualKey, ScanCode)
		local selectedRow = ar_optionlist:GetSelectedRow()
		if VirtualKey == KeyCodes["BUTTON_START"] then
			local newrules
			if menu_multiplayer_buildtournament.type == ReplicatedSession.GAMETYPE_STUNT or GetSelectedItemValue(AddRaceItems, GameType) == 2 then
				newrules = ReplicatedSession.GAMETYPE_STUNT
			else
				newrules = GetSelectedItemValue(AddRaceItems, GameMode)
			end
				
			if EditMode == NEW_EVENT then
				table.insert(
					Events,
					{
						trackid = ValidTracks[SelectedTrack],
						rules = newrules,
						lapsOrTimeLimit = GetSelectedItemValue(AddRaceItems, Laps),
						numhunters = GetSelectedItemValue(AddRaceItems, NumHunters),
					}
				)
				RefreshEventGrid(self)
				BuildMenuButtons()
			else
				Events[CurrentEvent] = {
					trackid = ValidTracks[SelectedTrack],
					rules = newrules,
					lapsOrTimeLimit = GetSelectedItemValue(AddRaceItems, Laps),
					numhunters = GetSelectedItemValue(AddRaceItems, NumHunters),
				}
				RefreshEventGrid(self)
				wm.GetWindow("edit_handler"):SetFocus()
			end
			wm.GetWindow("ar_popup"):HideWindow()
		elseif VirtualKey == KeyCodes["BUTTON_SELECT"] then
			wm.GetWindow("ar_popup"):HideWindow()
			if EditMode == NEW_EVENT then
				BuildMenuButtons()
			else
				wm.GetWindow("edit_handler"):SetFocus()
			end
		elseif VirtualKey == KeyCodes["BUTTON_LEFT"] then
			if selectedRow == 4 then -- Track
				local numtracks = table.getn(ValidTracks)
				SelectedTrack = math.mod(SelectedTrack - 2 + numtracks, numtracks) + 1
			else
				local selectedItem = GetSelectedItem(AddRaceItems, selectedRow) - 1
				local numItems = GetNumItems(AddRaceItems, selectedRow)
				if selectedItem < 1 then
					selectedItem = numItems
				end
				SetSelectedItem(AddRaceItems, selectedRow, selectedItem)
			end
			if AddRaceItems[selectedRow][OnChanged] then
				AddRaceItems[selectedRow][OnChanged]()
			end
			ar_optionlist:Refresh()
		elseif VirtualKey == KeyCodes["BUTTON_RIGHT"] then
			if selectedRow == 4 then
				SelectedTrack = math.mod(SelectedTrack, table.getn(ValidTracks)) + 1
			else
				local selectedItem = GetSelectedItem(AddRaceItems, selectedRow) + 1
				local numItems = GetNumItems(AddRaceItems, selectedRow)
				if selectedItem > numItems then
					selectedItem = 1
				end
				SetSelectedItem(AddRaceItems, selectedRow, selectedItem)
				ar_optionlist:Refresh()
			end
			if AddRaceItems[selectedRow][OnChanged] then
				AddRaceItems[selectedRow][OnChanged]()
			end
			ar_optionlist:Refresh()
		elseif VirtualKey == KeyCodes["BUTTON_DOWN"] then
			local prevsel = ar_optionlist:GetSelectedRow()
			repeat
				ar_optionlist:MoveNext()
			until AddRaceItems[ar_optionlist:GetSelectedRow()][Enabled] == true or ar_optionlist:GetSelectedRow() == table.getn(AddRaceItems)
			if ar_optionlist:GetSelectedRow() == table.getn(AddRaceItems) and AddRaceItems[ar_optionlist:GetSelectedRow()][Enabled] == false then
				ar_optionlist:SetSelectedRow(prevsel)
			end
		elseif VirtualKey == KeyCodes["BUTTON_UP"] then
			local prevsel = ar_optionlist:GetSelectedRow()
			repeat
				ar_optionlist:MovePrev()
			until AddRaceItems[ar_optionlist:GetSelectedRow()][Enabled] == true or ar_optionlist:GetSelectedRow() == 1
			if ar_optionlist:GetSelectedRow() == 1 and AddRaceItems[ar_optionlist:GetSelectedRow()][Enabled] == false then
				ar_optionlist:SetSelectedRow(prevsel)
			end
		end
	end
end

function menu_multiplayer_buildtournament.init(self)
	self.parent:init(self)
	
	local ppos = POS(0,62)
	local p = Frame{Name="track_image_bar",Position=ppos,Size=SIZE(640,22)}:AttachResource(self:getResource("black_transparent_50"))

	--//backdrop
	local resource = self:getResource("backdrop_normal")
	local size = GetResourceSize(resource)

	Frame { Position=POS(56,84), Size=size}:AttachResource(resource)
	Frame { Position=POS(81,169), Size=size}:AttachResource(resource)
	Frame { Position=POS(106,254), Size=size}:AttachResource(resource)
	Frame { Position=POS(131,339), Size=size}:AttachResource(resource)

	--//races
	state.eventwindows={}

	local rowpositions={
		POS(82,128),
		POS(94,170),
		POS(106,212),
		POS(118,254),
	}

	local imgsize = wm.GetResourceSize(self:getResource("track_images_forest1"))
	for i=1,12 do
		local pos = rowpositions[math.floor((i-1)/3)+1]
		local x = pos[1] + 71 * math.mod(i-1,3)
		local w = Frame { Name="event_icon_frame_"..i, Position=POS(x,pos[2]), Size=imgsize }
		w.position=pos

		local imageframe = Frame { Name="event_icon_"..i, Position=POS(0,0), Size=imgsize, Parent=w }
		
		w.info = StaticText { Name="event_info_"..i, Position=POS(66,18), Size=SIZE(20,20), Font=fontmedium(), Color=GetPaletteColor(1), Align=FONTF_RIGHT, Parent=w }

		if Events[i] then
			w.image = imageframe:AttachResource(self:getResource(Levels[Events[i].trackid].TrackIcon))
			w.image:SetAlpha(0)
			if Events[i].rules ~= ReplicatedSession.GAMETYPE_STUNT and Events[i].rules ~= ReplicatedSession.GAMETYPE_DERBY_LMS then
				w.info:SetTitle(L(Events[i].lapsOrTimeLimit))
			end
		else
			w.image = imageframe:AttachResource(self:getResource("track_images1_empty_box"))
			w.image:SetAlpha(0)
		end

		table.insert(state.eventwindows,w)
	end

--	RefreshEventGrid()
	
	imgsize = wm.GetResourceSize(self:getResource("track_imagesl_selection_glow"))
	local hilite = Frame { Name="highlight", Position=POS(0,0), Size=imgsize, DrawBackgroundColor=FALSE, Layer=5 }:AttachResource(self:getResource("track_imagesl_selection_glow"))
	hilite:HideWindow()

	CreateEditRaceItems(self)
	CreateAddRaceItems(self)
end

function menu_multiplayer_buildtournament.update(self,time)
	self.parent:update(self,time)
	
	local alpha = 1 - 0.20 + math.sin(time * 6) * 0.20
	wm.GetWindow("highlight"):SetAlpha(alpha)
end

function menu_multiplayer_buildtournament.deinit(self)
	self.parent:deinit(self)
end

function menu_multiplayer_buildtournament.startshow(self)
	self.parent:startshow(self)

	ShowEventWindows()
end

function menu_multiplayer_buildtournament.starthide(self)
	self.parent:starthide(self)

	HideEventWindows()
end
