--///////////////////////////////////////////////////////////////////////////
--// MenuDebug.bed
--///////////////////////////////////////////////////////////////////////////
--// Copyright (c) 2005 Bugbear Entertainment ltd. 
--// All Rights Reserved.
--// 
--// Created on 15.4.2005 12:07:58
--// 
--// @Author Mikko Sivulainen (mikko.sivulainen@bugbear.fi)
--///////////////////////////////////////////////////////////////////////////



DebugMenuTree={}

local function GetDebugMenu(menuname)
	return menuname
end


local handle
local function eventhandler(event)
	if event.id == EVENT_MENU_ENTERMENU then
		if not DebugMenuTree[event.data] then
			DebugMenuTree[event.data]={}
		end

		if DebugMenuCurrentMenu then
			local oldmenu=DebugMenuTree[DebugMenuCurrentMenu]
			if not oldmenu then 
				oldmenu={}
				DebugMenuTree[DebugMenuCurrentMenu] = oldmenu
			end

			local newmenu=DebugMenuTree[event.data]
			if not newmenu.parent then 
				newmenu.parent={}
			end
			
			newmenu.parent[DebugMenuCurrentMenu]=true
			
			if not oldmenu.childs then
				oldmenu.childs={}
			end

			oldmenu.childs[event.data]=true
		end			

		DebugMenuCurrentMenu=event.data
	end
end


local function ParseMenu(menu)
	if type(menu) ~= "table" then return end

	local t={}

	return t
end


local function CreateMenuTree()
--//	DebugMenuTree={}

	local k,v  --//go through globaltable and get everything that begins with menu_
	for k,v in pairs(_G) do
		if string.sub(k,1,5) == "menu_" then
			local m=ParseMenu(v)
			if m then
				table.insert(DebugMenuTree,m)
			end
		end
	end

	LOG("MenuDebug found %d menus",table.getn(DebugMenuTree))
end




function InitMenuDebug()

	CreateMenuTree()

	handle=Event:AddListener(eventhandler,EVENTTYPE_MENU)
end



